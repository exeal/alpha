/**
 * @file platforms.hpp
 * Detects the platforms and defines several symbols.
 *
 * <h3>Window System</h3>
 * Checked by @c ASCENSION_SUPPORTS_WINDOW_SYSTEM and @c ASCENSION_SELECTS_WINDOW_SYSTEM macros.
 * <table>
 *   <tr><th>Window System</th><th>Symbol</th><th>Notes</th></tr>
 *   <tr><td>GTK3+ (gtkmm 3.x)</td><td>@c ASCENSION_WINDOW_SYSTEM_GTK</td><td></td></tr>
 *   <tr><td>Quartz Compositor of Mac OS X</td><td>@c ASCENSION_WINDOW_SYSTEM_QUARTZ</td><td>Default if @c BOOST_OS_MACOS is defined</td></tr>
 *   <tr><td>Nokia Qt</td><td>@c ASCENSION_WINDOW_SYSTEM_QT</td><td></td></tr>
 *   <tr><td>Windows Win32</td><td>@c ASCENSION_WINDOW_SYSTEM_WIN32</td><td>Default if @c BOOST_OS_WINDOWS is defined</td></tr>
 *   <tr><td>X Window System</td><td>@c ASCENSION_WINDOW_SYSTEM_X</td><td></td></tr>
 * </table>
 *
 * <h3>Graphics System</h3>
 * Checked by @c ASCENSION_SUPPORTS_GRAPHICS_SYSTEM and @c ASCENSION_SELECTS_GRAPHICS_SYSTEM macros.
 * <table>
 *   <tr><th>Graphics System</th><th>Symbol</th><th>Notes</th></tr>
 *   <tr><td>Cairo</td><td>@c ASCENSION_GRAPHICS_SYSTEM_CAIRO</td><td>Default if @c ASCENSION_SELECTS_WINDOW_SYSTEM(GTK)</td></tr>
 *   <tr><td>Mac OS X Core Graphics</td><td>@c ASCENSION_GRAPHICS_SYSTEM_CORE_GRAPHICS</td><td>Default if @c ASCENSION_SELECTS_WINDOW_SYSTEM(QUARTZ)</td></tr>
 *   <tr><td>Windows Direct2D</td><td>@c ASCENSION_GRAPHICS_SYSTEM_DIRECT2D</td><td></td></tr>
 *   <tr><td>Nokia Qt</td><td>@c ASCENSION_GRAPHICS_SYSTEM_QT</td><td>Default if @c ASCENSION_SELECTS_WINDOW_SYSTEM(QT)</td></tr>
 *   <tr><td>Windows GDI</td><td>@c ASCENSION_GRAPHICS_SYSTEM_WIN32_GDI</td><td>Default if @c ASCENSION_SELECTS_WINDOW_SYSTEM(WIN32)</td></tr>
 *   <tr><td>Windows GDI+</td><td>@c ASCENSION_GRAPHICS_SYSTEM_WIN32_GDIPLUS</td><td></td></tr>
 * </table>
 *
 * <h3>Text/Glyph Shaping Engine</h3>
 * Checked by @c ASCENSION_SUPPORTS_SHAPING_ENGINE and @c ASCENSION_SELECTS_SHAPING_ENGINE macros.
 * <table>
 *   <tr><th>Shaping Engine</th><th>Symbol</th><th>Notes</th></tr>
 *   <tr><td>Mac OS X Core Graphics</td><td>@c ASCENSION_SHAPING_ENGINE_CORE_GRAPHICS</td><td></td></tr>
 *   <tr><td>Mac OS X Core Text</td><td>@c ASCENSION_SHAPING_ENGINE_CORE_TEXT</td><td>Default if @c ASCENSION_SELECTS_GRAPHICS_SYSTEM(CORE_GRAPHICS)</td></tr>
 *   <tr><td>Windows DirectWrite</td><td>@c ASCENSION_SHAPING_ENGINE_DIRECT_WRITE</td><td>Default if @c ASCENSION_SELECTS_GRAPHICS_SYSTEM(DIRECT2D)</td></tr>
 *   <tr><td>HarfBuzz</td><td>@c ASCENSION_SHAPING_ENGINE_HARFBUZZ</td><td></td></tr>
 *   <tr><td>Pango</td><td>@c ASCENSION_SHAPING_ENGINE_PANGO</td><td>Default if @c ASCENSION_SELECTS_GRAPHICS_SYSTEM(CAIRO)</td></tr>
 *   <tr><td>Nokia Qt</td><td>@c ASCENSION_SHAPING_ENGINE_QT</td><td>Default if @c ASCENSION_SELECTS_GRAPHICS_SYSTEM(QT)</td></tr>
 *   <tr><td>Windows Uniscribe</td><td>@c ASCENSION_SHAPING_ENGINE_UNISCRIBE</td><td>Default if @c ASCENSION_SELECTS_GRAPHICS_SYSTEM(WIN32_GDI)</td></tr>
 *   <tr><td>Windows GDI</td><td>@c ASCENSION_SHAPING_ENGINE_WIN32_GDI</td><td></td></tr>
 *   <tr><td>Windows GDI+</td><td>@c ASCENSION_SHAPING_ENGINE_WIN32_GDIPLUS</td><td>Default if @c ASCENSION_SELECTS_GRAPHICS_SYSTEM(WIN32_GDIPLUS)</td></tr>
 * </table>
 *
 * @author exeal
 * @date 2010-11-06 Separated from common.hpp.
 */

#ifndef ASCENSION_PLATFORMS_HPP
#define ASCENSION_PLATFORMS_HPP
#include <boost/config.hpp>
#include <boost/predef.h>

#define ASCENSION_CANT_DETECT_PLATFORM()	\
	static_assert(false, "Platform can't detect.")


// window system //////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Checks the given window system is supported.
 * @param name The window system name
 */
#define ASCENSION_SUPPORTS_WINDOW_SYSTEM(name) (ASCENSION_WINDOW_SYSTEM_##name != BOOST_VERSION_NUMBER_NOT_AVAILABLE)
/**
 * Checks the library selects the given window system.
 * @param name The window system name
 */
#define ASCENSION_SELECTS_WINDOW_SYSTEM(name) defined( ASCENSION_SELECTS_WINDOW_SYSTEM_##name )

#ifndef ASCENSION_WINDOW_SYSTEM_GTK
#	define ASCENSION_WINDOW_SYSTEM_GTK BOOST_VERSION_NUMBER_NOT_AVAILABLE
#endif
#ifndef ASCENSION_WINDOW_SYSTEM_QUARTZ
#	if BOOST_OS_MACOS
#		define ASCENSION_WINDOW_SYSTEM_QUARTZ BOOST_VERSION_NUMBER_AVAILABLE
#	else
#		define ASCENSION_WINDOW_SYSTEM_QUARTZ BOOST_VERSION_NUMBER_NOT_AVAILABLE
#	endif
#endif
#ifndef ASCENSION_WINDOW_SYSTEM_QT
#	define ASCENSION_WINDOW_SYSTEM_QT BOOST_VERSION_NUMBER_NOT_AVAILABLE
#endif
#ifndef ASCENSION_WINDOW_SYSTEM_WIN32
#	if BOOST_OS_WINDOWS
#		define ASCENSION_WINDOW_SYSTEM_WIN32 BOOST_VERSION_NUMBER_AVAILABLE
#	else
#		define ASCENSION_WINDOW_SYSTEM_WIN32 BOOST_VERSION_NUMBER_NOT_AVAILABLE
#	endif
#endif
#ifndef ASCENSION_WINDOW_SYSTEM_X
#	define ASCENSION_WINDOW_SYSTEM_X BOOST_VERSION_NUMBER_NOT_AVAILABLE
#endif

#if !defined(ASCENSION_SELECTS_WINDOW_SYSTEM_GTK) && ASCENSION_SUPPORTS_WINDOW_SYSTEM(GTK)
#	define ASCENSION_SELECTS_WINDOW_SYSTEM_GTK
#elif !defined(ASCENSION_SELECTS_WINDOW_SYSTEM_QUARTZ) && ASCENSION_SUPPORTS_WINDOW_SYSTEM(QUARTZ)
#	define ASCENSION_SELECTS_WINDOW_SYSTEM_QUARTZ
#elif !defined(ASCENSION_SELECTS_WINDOW_SYSTEM_QT) && ASCENSION_SUPPORTS_WINDOW_SYSTEM(QT)
#	define ASCENSION_SELECTS_WINDOW_SYSTEM_QT
#elif !defined(ASCENSION_SELECTS_WINDOW_SYSTEM_WIN32) && ASCENSION_SUPPORTS_WINDOW_SYSTEM(WIN32)
#	define ASCENSION_SELECTS_WINDOW_SYSTEM_WIN32
#elif !defined(ASCENSION_SELECTS_WINDOW_SYSTEM_X) && ASCENSION_SUPPORTS_WINDOW_SYSTEM(X)
#	define ASCENSION_SELECTS_WINDOW_SYSTEM_X
#else
#	error Can't detect window system.
#endif

#if (ASCENSION_WINDOW_SYSTEM_GTK + ASCENSION_WINDOW_SYSTEM_QUARTZ + ASCENSION_WINDOW_SYSTEM_QT + ASCENSION_WINDOW_SYSTEM_WIN32 + ASCENSION_WINDOW_SYSTEM_X != BOOST_VERSION_NUMBER_AVAILABLE)
#	error Multiple window system is available.
#endif

#ifdef ASCENSION_DIAGNOSE_PLATFORM_SELECTION
#	pragma message("Window system selection and support status --")
#	pragma message("  GTK+3: " BOOST_STRINGIZE(ASCENSION_WINDOW_SYSTEM_GTK))
#	pragma message("  Qt: " BOOST_STRINGIZE(ASCENSION_WINDOW_SYSTEM_QT))
#	pragma message("  Quartz: " BOOST_STRINGIZE(ASCENSION_WINDOW_SYSTEM_QUARTZ))
#	pragma message("  Win32: " BOOST_STRINGIZE(ASCENSION_WINDOW_SYSTEM_WIN32))
#	pragma message("  X Window System: " BOOST_STRINGIZE(ASCENSION_WINDOW_SYSTEM_X))
#endif


// graphics system ////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Checks the given graphics system is supported.
 * @param name The window system name
 */
#define ASCENSION_SUPPORTS_GRAPHICS_SYSTEM(name) (ASCENSION_GRAPHICS_SYSTEM_##name != BOOST_VERSION_NUMBER_NOT_AVAILABLE)
/**
 * Checks the library selects the given graphics system.
 * @param name The window system name
 */
#define ASCENSION_SELECTS_GRAPHICS_SYSTEM(name) defined( ASCENSION_SELECTS_GRAPHICS_SYSTEM_##name )

#ifndef ASCENSION_GRAPHICS_SYSTEM_CAIRO
#	if ASCENSION_SELECTS_WINDOW_SYSTEM(GTK)
#		define ASCENSION_GRAPHICS_SYSTEM_CAIRO BOOST_VERSION_NUMBER_AVAILABLE
#	else
#		define ASCENSION_GRAPHICS_SYSTEM_CAIRO BOOST_VERSION_NUMBER_NOT_AVAILABLE
#	endif
#endif
#ifndef ASCENSION_GRAPHICS_SYSTEM_CORE_GRAPHICS
#	if ASCENSION_SELECTS_WINDOW_SYSTEM(QUARTZ)
#		define ASCENSION_GRAPHICS_SYSTEM_CORE_GRAPHICS BOOST_VERSION_NUMBER_AVAILABLE
#	else
#		define ASCENSION_GRAPHICS_SYSTEM_CORE_GRAPHICS BOOST_VERSION_NUMBER_NOT_AVAILABLE
#	endif
#endif
#ifndef ASCENSION_GRAPHICS_SYSTEM_DIRECT2D
#	define ASCENSION_GRAPHICS_SYSTEM_DIRECT2D BOOST_VERSION_NUMBER_NOT_AVAILABLE
#endif
#ifndef ASCENSION_GRAPHICS_SYSTEM_QT
#	if ASCENSION_SELECTS_WINDOW_SYSTEM(QT)
#		define ASCENSION_GRAPHICS_SYSTEM_QT BOOST_VERSION_NUMBER_AVAILABLE
#	else
#		define ASCENSION_GRAPHICS_SYSTEM_QT BOOST_VERSION_NUMBER_NOT_AVAILABLE
#	endif
#endif
#ifndef ASCENSION_GRAPHICS_SYSTEM_WIN32_GDI
#	if ASCENSION_SELECTS_WINDOW_SYSTEM(WIN32)
#		define ASCENSION_GRAPHICS_SYSTEM_WIN32_GDI BOOST_VERSION_NUMBER_AVAILABLE
#	else
#		define ASCENSION_GRAPHICS_SYSTEM_WIN32_GDI BOOST_VERSION_NUMBER_NOT_AVAILABLE
#	endif
#endif
#ifndef ASCENSION_GRAPHICS_SYSTEM_WIN32_GDIPLUS
#	define ASCENSION_GRAPHICS_SYSTEM_GDIPLUS BOOST_VERSION_NUMBER_NOT_AVAILABLE
#endif

#if !defined(ASCENSION_SELECTS_GRAPHICS_SYSTEM_CAIRO) && ASCENSION_SUPPORTS_GRAPHICS_SYSTEM(CAIRO)
#	define ASCENSION_SELECTS_GRAPHICS_SYSTEM_CAIRO
#elif !defined(ASCENSION_SELECTS_GRAPHICS_SYSTEM_CORE_GRAPHICS) && ASCENSION_SUPPORTS_GRAPHICS_SYSTEM(CORE_GRAPHICS)
#	define ASCENSION_SELECTS_GRAPHICS_SYSTEM_CORE_GRAPHICS
#elif !defined(ASCENSION_SELECTS_GRAPHICS_SYSTEM_DIRECT2D) && ASCENSION_SUPPORTS_GRAPHICS_SYSTEM(DIRECT2D)
#	define ASCENSION_SELECTS_GRAPHICS_SYSTEM_DIRECT2D
#elif !defined(ASCENSION_SELECTS_GRAPHICS_SYSTEM_QT) && ASCENSION_SUPPORTS_GRAPHICS_SYSTEM(QT)
#	define ASCENSION_SELECTS_GRAPHICS_SYSTEM_QT
#elif !defined(ASCENSION_SELECTS_GRAPHICS_SYSTEM_WIN32_GDI) && ASCENSION_SUPPORTS_GRAPHICS_SYSTEM(WIN32_GDI)
#	define ASCENSION_SELECTS_GRAPHICS_SYSTEM_WIN32_GDI
#elif !defined(ASCENSION_SELECTS_GRAPHICS_SYSTEM_WIN32_GDIPLUS) && ASCENSION_SUPPORTS_GRAPHICS_SYSTEM(WIN32_GDIPLUS)
#	define ASCENSION_SELECTS_GRAPHICS_SYSTEM_WIN32_PLUS
#else
#	error Can't detect graphics system.
#endif

#ifdef ASCENSION_DIAGNOSE_PLATFORM_SELECTION
#	pragma message("Graphics system selection and support status --")
#	pragma message("  cairomm: " BOOST_STRINGIZE(ASCENSION_GRAPHICS_SYSTEM_CAIRO))
#	pragma message("  Core Graphics: " BOOST_STRINGIZE(ASCENSION_GRAPHICS_SYSTEM_CORE_GRAPHICS))
#	pragma message("  Direct2D: " BOOST_STRINGIZE(ASCENSION_GRAPHICS_SYSTEM_DIRECT2D))
#	pragma message("  Qt: " BOOST_STRINGIZE(ASCENSION_GRAPHICS_SYSTEM_QT))
#	pragma message("  Win32 GDI: " BOOST_STRINGIZE(ASCENSION_GRAPHICS_SYSTEM_WIN32_GDI))
#	pragma message("  Win32 GDI+: " BOOST_STRINGIZE(ASCENSION_GRAPHICS_SYSTEM_WIN32_GDIPLUS))
#endif


// shaping engine /////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Checks the given shaping engine is supported.
 * @param name The window system name
 */
#define ASCENSION_SUPPORTS_SHAPING_ENGINE(name) (ASCENSION_SHAPING_ENGINE_##name != BOOST_VERSION_NUMBER_NOT_AVAILABLE)
/**
 * Checks the library selects the given shaping engine.
 * @param name The window system name
 */
#define ASCENSION_SELECTS_SHAPING_ENGINE(name) defined( ASCENSION_SELECTS_SHAPING_ENGINE_##name )

#ifndef ASCENSION_SHAPING_ENGINE_CORE_GRAPHICS
#	define ASCENSION_SHAPING_ENGINE_CORE_GRAPHICS BOOST_VERSION_NUMBER_NOT_AVAILABLE
#endif
#ifndef ASCENSION_SHAPING_ENGINE_CORE_TEXT
#	if ASCENSION_SELECTS_GRAPHICS_SYSTEM(CORE_GRAPHICS)
#		define ASCENSION_SHAPING_ENGINE_CORE_TEXT BOOST_VERSION_NUMBER_AVAILABLE
#	else
#		define ASCENSION_SHAPING_ENGINE_CORE_TEXT BOOST_VERSION_NUMBER_NOT_AVAILABLE
#	endif
#endif
#ifndef ASCENSION_SHAPING_ENGINE_DIRECT_WRITE
#	if ASCENSION_SELECTS_GRAPHICS_SYSTEM(DIRECT2D)
#		define ASCENSION_SHAPING_ENGINE_DIRECT_WRITE BOOST_VERSION_NUMBER_AVAILABLE
#	else
#		define ASCENSION_SHAPING_ENGINE_DIRECT_WRITE BOOST_VERSION_NUMBER_NOT_AVAILABLE
#	endif
#endif
#ifndef ASCENSION_SHAPING_ENGINE_HARFBUZZ
#	define ASCENSION_SHAPING_ENGINE_HARFBUZZ BOOST_VERSION_NUMBER_NOT_AVAILABLE
#endif
#ifndef ASCENSION_SHAPING_ENGINE_PANGO
#	if ASCENSION_SELECTS_GRAPHICS_SYSTEM(CAIRO)
#		define ASCENSION_SHAPING_ENGINE_PANGO BOOST_VERSION_NUMBER_AVAILABLE
#	else
#		define ASCENSION_SHAPING_ENGINE_PANGO BOOST_VERSION_NUMBER_NOT_AVAILABLE
#	endif
#endif
#ifndef ASCENSION_SHAPING_ENGINE_QT
#	if ASCENSION_SELECTS_GRAPHICS_SYSTEM(QT)
#		define ASCENSION_SHAPING_ENGINE_QT BOOST_VERSION_NUMBER_AVAILABLE
#	else
#		define ASCENSION_SHAPING_ENGINE_QT BOOST_VERSION_NUMBER_NOT_AVAILABLE
#	endif
#endif
#ifndef ASCENSION_SHAPING_ENGINE_UNISCRIBE
#	if ASCENSION_SELECTS_GRAPHICS_SYSTEM(WIN32_GDI)
#		define ASCENSION_SHAPING_ENGINE_UNISCRIBE BOOST_VERSION_NUMBER_AVAILABLE
#	else
#		define ASCENSION_SHAPING_ENGINE_UNISCRIBE BOOST_VERSION_NUMBER_NOT_AVAILABLE
#	endif
#endif
#ifndef ASCENSION_SHAPING_ENGINE_WIN32_GDI
#	define ASCENSION_SHAPING_ENGINE_WIN32_GDI BOOST_VERSION_NUMBER_NOT_AVAILABLE
#endif
#ifndef ASCENSION_SHAPING_ENGINE_WIN32_GDIPLUS
#	if ASCENSION_SELECTS_GRAPHICS_SYSTEM(WIN32_GDIPLUS)
#		define ASCENSION_SHAPING_ENGINE_WIN32_GDIPLUS BOOST_VERSION_NUMBER_AVAILABLE
#	else
#		define ASCENSION_SHAPING_ENGINE_WIN32_GDIPLUS BOOST_VERSION_NUMBER_NOT_AVAILABLE
#	endif
#endif

#if !defined(ASCENSION_SELECTS_SHAPING_ENGINE_CORE_GRAPHICS) && ASCENSION_SUPPORTS_SHAPING_ENGINE(CORE_GRAPHICS)
#	define ASCENSION_SELECTS_SHAPING_ENGINE_CORE_GRAPHICS
#elif !defined(ASCENSION_SELECTS_SHAPING_ENGINE_CORE_TEXT) && ASCENSION_SUPPORTS_SHAPING_ENGINE(CORE_TEXT)
#	define ASCENSION_SELECTS_SHAPING_ENGINE_CORE_TEXT
#elif !defined(ASCENSION_SELECTS_SHAPING_ENGINE_DIRECT_WRITE) && ASCENSION_SUPPORTS_SHAPING_ENGINE(DIRECT_WRITE)
#	define ASCENSION_SELECTS_SHAPING_ENGINE_DIRECT_WRITE
#elif !defined(ASCENSION_SELECTS_SHAPING_ENGINE_HARFBUZZ) && ASCENSION_SUPPORTS_SHAPING_ENGINE(HARFBUZZ)
#	define ASCENSION_SELECTS_SHAPING_ENGINE_HARFBUZZ
#elif !defined(ASCENSION_SELECTS_SHAPING_ENGINE_PANGO) && ASCENSION_SUPPORTS_SHAPING_ENGINE(PANGO)
#	define ASCENSION_SELECTS_SHAPING_ENGINE_PANGO
#elif !defined(ASCENSION_SELECTS_SHAPING_ENGINE_QT) && ASCENSION_SUPPORTS_SHAPING_ENGINE(QT)
#	define ASCENSION_SELECTS_SHAPING_ENGINE_QT
#elif !defined(ASCENSION_SELECTS_SHAPING_ENGINE_UNISCRIBE) && ASCENSION_SUPPORTS_SHAPING_ENGINE(UNISCRIBE)
#	define ASCENSION_SELECTS_SHAPING_ENGINE_UNISCRIBE
#elif !defined(ASCENSION_SELECTS_SHAPING_ENGINE_WIN32_GDI) && ASCENSION_SUPPORTS_SHAPING_ENGINE(WIN32_GDI)
#	define ASCENSION_SELECTS_SHAPING_ENGINE_WIN32_GDI
#elif !defined(ASCENSION_SELECTS_SHAPING_ENGINE_WIN32_GDIPLUS) && ASCENSION_SUPPORTS_SHAPING_ENGINE(WIN32_GDIPLUS)
#	define ASCENSION_SELECTS_SHAPING_ENGINE_WIN32_GDIPLUS
#else
#	error Can't detect shaping engine.
#endif

#ifdef ASCENSION_DIAGNOSE_PLATFORM_SELECTION
#	pragma message("Shaping engine selection and support status --")
#	pragma message("  Core Text: " BOOST_STRINGIZE(ASCENSION_SHAPING_ENGINE_CORE_TEXT))
#	pragma message("  Direct Write: " BOOST_STRINGIZE(ASCENSION_SHAPING_ENGINE_DIRECT_WRITE))
#	pragma message("  HarfBuzz: " BOOST_STRINGIZE(ASCENSION_SHAPING_ENGINE_HARF_BUZZ))
#	pragma message("  pangomm: " BOOST_STRINGIZE(ASCENSION_SHAPING_ENGINE_PANGO))
#	pragma message("  Qt: " BOOST_STRINGIZE(ASCENSION_SHAPING_ENGINE_QT))
#	pragma message("  Uniscribe: " BOOST_STRINGIZE(ASCENSION_SHAPING_ENGINE_UNISCRIBE))
#	pragma message("  Win32 GDI: " BOOST_STRINGIZE(ASCENSION_SHAPING_ENGINE_WIN32_GDI))
#	pragma message("  Win32 GDI+: " BOOST_STRINGIZE(ASCENSION_SHAPING_ENGINE_WIN32_GDIPLUS))
#endif


// ASCENSION_HAS_CSTDINT and ASCENSION_HAS_UNISTD_H

#if BOOST_OS_AIX
#	define ASCENSION_HAS_CSTDINT
#	define ASCENSION_HAS_UNISTD_H
#elif BOOST_OS_BSD
#	define ASCENSION_HAS_UNISTD_H
#elif BOOST_OS_HPUX
#	if BOOST_COMP_GNUC >= BOOST_VERSION_NUMBER(3, 0, 0)
#		define ASCENSION_CSTDINT
#	endif
#	define ASCENSION_HAS_UNISTD_H
#elif BOOST_OS_LINUX
#	define ASCENSION_HAS_CSTDINT
#	define ASCENSION_HAS_UNISTD_H
#elif BOOST_OS_MACOS
#	define ASCENSION_HAS_UNISTD_H
#elif BOOST_OS_WINDOWS
#	if defined(__MINGW__)
#		define ASCENSION_HAS_CSTDINT
#		define ASCENSION_HAS_UNISTD_H
#	endif
#elif BOOST_OS_SOLARIS
#	define ASCENSION_HAS_UNISTD_H
#endif

#if defined(__STDC_VERSION__) && (__STDC_VERSION__ >= 199901)
#	define ASCENSION_HAS_CSTDINT
#elif BOOST_COMP_MSVC >= BOOST_VERSION_NUMBER(10, 0, 0)
#	define ASCENSION_HAS_CSTDINT
#elif defined(ASCENSION_HAS_UNISTD_H)
#	include <unistd.h>
#	if defined(_POSIX_VERSION) && (_POSIX_VERSION >= 200100)
#		define ASCENSION_HAS_STDINT_H
#	endif
#endif

#if defined(ASCENSION_HAS_UNISTD_H) && !defined(BOOST_OS_WINDOWS)
#	define ASCENSION_OS_POSIX BOOST_VERSION_NUMBER_AVAILABLE
#endif


#if BOOST_OS_WINDOWS
#	ifndef _GLIBCXX_USE_WCHAR_T
#		define _GLIBCXX_USE_WCHAR_T 1
#	endif
#	ifndef _GLIBCXX_USE_WSTRING
#		define _GLIBCXX_USE_WSTRING 1
#	endif
#endif // BOOST_OS_WINDOWS

#endif // !ASCENSION_PLATFORMS_HPP
