// automatically generated by tools/gen-uprops.py at $ Mon Nov 15 22:42:37 2010 $
/// Returns the property of the specified character @a c.
inline int GeneralCategory::of(CodePoint c) /*throw()*/ {if(!isValidCodePoint(c)) return DEFAULT_VALUE; const internal::PropertyPartition* const p = std::upper_bound(VALUES_, VALUES_ + NUMBER_, c, internal::PropertyRangeComparer<internal::PropertyPartition, CodePoint>()); assert(p != VALUES_); return p[-1].property;}
/// Returns the property with the given name.
inline int GeneralCategory::forName(const Char* name) {
	const ucd::internal::ValueName* const p =
		std::lower_bound(NAMES_, NAMES_ + 79, name, ucd::internal::ValueNameComparer());
	return (p != NAMES_ + 79 && PropertyNameComparer<Char>::compare(name, p->name)) ?
		p->value : NOT_PROPERTY;
}
/// Returns the property of the specified character @a c.
inline int Script::of(CodePoint c) /*throw()*/ {if(!isValidCodePoint(c)) return DEFAULT_VALUE; const internal::PropertyPartition* const p = std::upper_bound(VALUES_, VALUES_ + NUMBER_, c, internal::PropertyRangeComparer<internal::PropertyPartition, CodePoint>()); assert(p != VALUES_); return p[-1].property;}
/// Returns the property with the given name.
inline int Script::forName(const Char* name) {
	const ucd::internal::ValueName* const p =
		std::lower_bound(NAMES_, NAMES_ + 157, name, ucd::internal::ValueNameComparer());
	return (p != NAMES_ + 157 && PropertyNameComparer<Char>::compare(name, p->name)) ?
		p->value : NOT_PROPERTY;
}
/// Returns the property of the specified character @a c.
inline int LineBreak::of(CodePoint c) /*throw()*/ {if(!isValidCodePoint(c)) return DEFAULT_VALUE; const internal::PropertyPartition* const p = std::upper_bound(VALUES_, VALUES_ + NUMBER_, c, internal::PropertyRangeComparer<internal::PropertyPartition, CodePoint>()); assert(p != VALUES_); return p[-1].property;}
/// Returns the property with the given name.
inline int LineBreak::forName(const Char* name) {
	const ucd::internal::ValueName* const p =
		std::lower_bound(NAMES_, NAMES_ + 68, name, ucd::internal::ValueNameComparer());
	return (p != NAMES_ + 68 && PropertyNameComparer<Char>::compare(name, p->name)) ?
		p->value : NOT_PROPERTY;
}
/// Returns the property of the specified character @a c.
inline int EastAsianWidth::of(CodePoint c) /*throw()*/ {if(!isValidCodePoint(c)) return DEFAULT_VALUE; const internal::PropertyPartition* const p = std::upper_bound(VALUES_, VALUES_ + NUMBER_, c, internal::PropertyRangeComparer<internal::PropertyPartition, CodePoint>()); assert(p != VALUES_); return p[-1].property;}
/// Returns the property with the given name.
inline int EastAsianWidth::forName(const Char* name) {
	const ucd::internal::ValueName* const p =
		std::lower_bound(NAMES_, NAMES_ + 12, name, ucd::internal::ValueNameComparer());
	return (p != NAMES_ + 12 && PropertyNameComparer<Char>::compare(name, p->name)) ?
		p->value : NOT_PROPERTY;
}
/// Returns the property of the specified character @a c.
inline int Block::of(CodePoint c) /*throw()*/ {if(!isValidCodePoint(c)) return DEFAULT_VALUE; const internal::PropertyPartition* const p = std::upper_bound(VALUES_, VALUES_ + NUMBER_, c, internal::PropertyRangeComparer<internal::PropertyPartition, CodePoint>()); assert(p != VALUES_); return p[-1].property;}
/// Returns the property with the given name.
inline int Block::forName(const Char* name) {
	const ucd::internal::ValueName* const p =
		std::lower_bound(NAMES_, NAMES_ + 179, name, ucd::internal::ValueNameComparer());
	return (p != NAMES_ + 179 && PropertyNameComparer<Char>::compare(name, p->name)) ?
		p->value : NOT_PROPERTY;
}
/// Returns the property with the given name.
inline int CanonicalCombiningClass::forName(const Char* name) {
	const ucd::internal::ValueName* const p =
		std::lower_bound(NAMES_, NAMES_ + 57, name, ucd::internal::ValueNameComparer());
	return (p != NAMES_ + 57 && PropertyNameComparer<Char>::compare(name, p->name)) ?
		p->value : NOT_PROPERTY;
}
/// Returns the property of the specified character @a c.
inline int CanonicalCombiningClass::of(CodePoint c) /*throw()*/ {
	const CodePoint* const p = std::lower_bound(CHARACTERS_, CHARACTERS_ + NUMBER_, c);
	return (p != CHARACTERS_ + NUMBER_ && *p == c) ? VALUES_[p - CHARACTERS_] : DEFAULT_VALUE;
};
/// Returns the property with the given name.
inline int BinaryProperty::forName(const Char* name) {
	const ucd::internal::ValueName* const p =
		std::lower_bound(NAMES_, NAMES_ + 96, name, ucd::internal::ValueNameComparer());
	return (p != NAMES_ + 96 && PropertyNameComparer<Char>::compare(name, p->name)) ?
		p->value : NOT_PROPERTY;
}
