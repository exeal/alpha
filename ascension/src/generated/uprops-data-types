// automatically generated by tools/gen-uprops.py at $ Mon Nov 15 22:42:37 2010 $
// automatically generated by tools/gen-uprops.py at $ Mon Nov 15 22:42:37 2010 $
namespace internal {
	struct PropertyPartition {
		CodePoint beginning;
		int property;
#if defined(ASCENSION_MSVC) && defined(_SECURE_SCL)
		bool operator<(const PropertyPartition& other) const {return beginning < other.beginning;}
#endif
	};
	template<typename CharT> struct PropertyRange {
		CharT beginning, end;
		int property;
#if defined(ASCENSION_MSVC) && defined(_SECURE_SCL)
		bool operator<(const PropertyRange& other) const {return beginning < other.beginning;}
#endif
	};
	template<typename T, typename CharT> struct PropertyRangeComparer {
		bool operator()(const T& lhs, CharT rhs) const {return lhs.beginning < rhs;}
		bool operator()(CharT lhs, const T& rhs) const {return lhs < rhs.beginning;}
#if defined(ASCENSION_MSVC) && defined(_SECURE_SCL)
		bool operator()(const T& lhs, const T& rhs) const {return lhs.beginning < rhs.beginning;}
#endif
	};
	struct ValueName {
		const Char* const name;
		const int value;
	};
	struct ValueNameComparer {
		bool operator()(const ValueName& lhs, const Char* rhs) const {return PropertyNameComparer<Char>::compare(lhs.name, rhs) < 0;}
		bool operator()(const Char* lhs, const ValueName& rhs) const {return PropertyNameComparer<Char>::compare(lhs, rhs.name) < 0;}
#if defined(ASCENSION_MSVC) && defined(_SECURE_SCL)
bool operator()(const ValueName& lhs, const ValueName& rhs) const {return PropertyNameComparer<Char>::compare(lhs.name, rhs.name) < 0;}
#endif
	};
}
