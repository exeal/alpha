/**
 * @file iso8859.cpp
 * Implements encoders for ISO-8859-2..10 and 13..16 (ISO-8859-1 is defined in encoder.cpp and
 * ISO-8859-11 is defined in thai.cpp).
 * @author exeal
 * @date 2004-2007
 */

#ifndef ASCENSION_NO_STANDARD_ENCODINGS
#include "../encoder.hpp"
using namespace ascension;
using namespace ascension::encoding;
using namespace std;

// registry
namespace {
	ASCENSION_BEGIN_SBCS_ENCODER_CLASS(ISO88592Encoder, standard::ISO_8859_2, "ISO-8859-2")
		ASCENSION_ENCODER_ALIASES(
			"iso-ir-101\0"
			"ISO_8859-2\0"
			"latin2\0"
			"l2\0"
			"csISOLatin2\0"
		)
	ASCENSION_END_ENCODER_CLASS()
	ASCENSION_BEGIN_SBCS_ENCODER_CLASS(ISO88593Encoder, standard::ISO_8859_3, "ISO-8859-3")
		ASCENSION_ENCODER_ALIASES(
			"iso-ir-109\0"
			"ISO_8859-3\0"
			"latin3\0"
			"l3\0"
			"csISOLatin3\0"
		)
	ASCENSION_END_ENCODER_CLASS()
	ASCENSION_BEGIN_SBCS_ENCODER_CLASS(ISO88594Encoder, standard::ISO_8859_4, "ISO-8859-4")
		ASCENSION_ENCODER_ALIASES(
			"iso-ir-110\0"
			"ISO_8859-4\0"
			"latin4\0"
			"l4\0"
			"csISOLatin4\0"
		)
	ASCENSION_END_ENCODER_CLASS()
	ASCENSION_BEGIN_SBCS_ENCODER_CLASS(ISO88595Encoder, standard::ISO_8859_5, "ISO-8859-5")
		ASCENSION_ENCODER_ALIASES(
			"iso-ir-144\0"
			"ISO_8859-5\0"
			"cyrillic\0"
			"csISOLatinCyrillic\0"
		)
	ASCENSION_END_ENCODER_CLASS()
	ASCENSION_BEGIN_SBCS_ENCODER_CLASS(ISO88596Encoder, standard::ISO_8859_6, "ISO-8859-6")
		ASCENSION_ENCODER_ALIASES(
			"iso-ir-127\0"
			"ISO_8859-6\0"
			"ECMA-114\0"
			"ASMO-708\0"
			"arabic\0"
			"csISOLatinArabic\0"
		)
	ASCENSION_END_ENCODER_CLASS()
	ASCENSION_BEGIN_SBCS_ENCODER_CLASS(ISO88597Encoder, standard::ISO_8859_7, "ISO-8859-7")
		ASCENSION_ENCODER_ALIASES(
			"iso-ir-126\0"
			"ISO_8859-7\0"
			"ELOT_928\0"
			"ECMA-118\0"
			"greek\0"
			"greek8\0"
			"csISOLatinGreek\0"
		)
	ASCENSION_END_ENCODER_CLASS()
	ASCENSION_BEGIN_SBCS_ENCODER_CLASS(ISO88598Encoder, standard::ISO_8859_8, "ISO-8859-8")
		ASCENSION_ENCODER_ALIASES(
			"iso-ir-138\0"
			"ISO_8859-8\0"
			"hebrew\0"
			"csISOLatinHebrew\0"
		)
	ASCENSION_END_ENCODER_CLASS()
	ASCENSION_BEGIN_SBCS_ENCODER_CLASS(ISO88599Encoder, standard::ISO_8859_9, "ISO-8859-9")
		ASCENSION_ENCODER_ALIASES(
			"iso-ir-148\0"
			"ISO_8859-9\0"
			"latin5\0"
			"l5\0"
			"csISOLatin5\0"
		)
	ASCENSION_END_ENCODER_CLASS()
	ASCENSION_BEGIN_SBCS_ENCODER_CLASS(ISO885910Encoder, standard::ISO_8859_10, "ISO-8859-10")
		ASCENSION_ENCODER_ALIASES(
			"iso-ir-157\0"
			"l6\0"
			"ISO_8859-10:1992\0"
			"csISOLatin6\0"
			"latin6\0"
		)
	ASCENSION_END_ENCODER_CLASS()
#ifndef ASCENSION_NO_EXTENDED_ENCODINGS
	ASCENSION_DEFINE_SBCS_ENCODER(ISO885913Encoder, extended::ISO_8859_13, "ISO-8859-13")
	ASCENSION_BEGIN_SBCS_ENCODER_CLASS(ISO885914Encoder, extended::ISO_8859_14, "ISO-8859-14")
		ASCENSION_ENCODER_ALIASES(
			"iso-ir-199\0"
			"ISO_8859-14:1998\0"
			"ISO_8859-14\0"
			"latin8\0"
			"iso-celtic\0"
			"l8\0"
		)
	ASCENSION_END_ENCODER_CLASS()
	ASCENSION_BEGIN_SBCS_ENCODER_CLASS(ISO885915Encoder, extended::ISO_8859_15, "ISO-8859-15")
		ASCENSION_ENCODER_ALIASES(
			"ISO_8859-15\0"
			"Latin-9\0"
		)
	ASCENSION_END_ENCODER_CLASS()
	ASCENSION_BEGIN_SBCS_ENCODER_CLASS(ISO885916Encoder, extended::ISO_8859_16, "ISO-8859-16")
		ASCENSION_ENCODER_ALIASES(
			"iso-ir-226\0"
			"ISO_8859-16:2001\0"
			"ISO_8859-16\0"
			"latin10\0"
			"l10\0"
		)
	ASCENSION_END_ENCODER_CLASS()
#endif /* !ASCENSION_NO_EXTENDED_ENCODINGS */

	struct Installer {
		Installer() {
			Encoder::registerEncoder(auto_ptr<Encoder>(new ISO88592Encoder));
			Encoder::registerEncoder(auto_ptr<Encoder>(new ISO88593Encoder));
			Encoder::registerEncoder(auto_ptr<Encoder>(new ISO88594Encoder));
			Encoder::registerEncoder(auto_ptr<Encoder>(new ISO88595Encoder));
			Encoder::registerEncoder(auto_ptr<Encoder>(new ISO88596Encoder));
			Encoder::registerEncoder(auto_ptr<Encoder>(new ISO88597Encoder));
			Encoder::registerEncoder(auto_ptr<Encoder>(new ISO88598Encoder));
			Encoder::registerEncoder(auto_ptr<Encoder>(new ISO88599Encoder));
			Encoder::registerEncoder(auto_ptr<Encoder>(new ISO885910Encoder));
			Encoder::registerEncoder(auto_ptr<Encoder>(new ISO885913Encoder));
			Encoder::registerEncoder(auto_ptr<Encoder>(new ISO885914Encoder));
			Encoder::registerEncoder(auto_ptr<Encoder>(new ISO885915Encoder));
			Encoder::registerEncoder(auto_ptr<Encoder>(new ISO885916Encoder));
		}
	} installer;
} // namespace @0


namespace {
	const Char RP__CH = REPLACEMENT_CHARACTER;
	const uchar N__A = UNMAPPABLE_NATIVE_CHARACTER;
	const Char ISO88592toUCS_A0[] = {
	/* 0xA0 */	0x00A0, 0x0104, 0x02D8, 0x0141, 0x00A4, 0x013D, 0x015A, 0x00A7,
				0x00A8, 0x0160, 0x015E, 0x0164, 0x0179, 0x00AD, 0x017D, 0x017B,
	/* 0xB0 */	0x00B0, 0x0105, 0x02DB, 0x0142, 0x00B4, 0x013E, 0x015B, 0x02C7,
				0x00B8, 0x0161, 0x015F, 0x0165, 0x017A, 0x02DD, 0x017E, 0x017C,
	/* 0xC0 */	0x0154, 0x00C1, 0x00C2, 0x0102, 0x00C4, 0x0139, 0x0106, 0x00C7,
				0x010C, 0x00C9, 0x0118, 0x00CB, 0x011A, 0x00CD, 0x00CE, 0x010E,
	/* 0xD0 */	0x0110, 0x0143, 0x0147, 0x00D3, 0x00D4, 0x0150, 0x00D6, 0x00D7,
				0x0158, 0x016E, 0x00DA, 0x0170, 0x00DC, 0x00DD, 0x0162, 0x00DF,
	/* 0xE0 */	0x0155, 0x00E1, 0x00E2, 0x0103, 0x00E4, 0x013A, 0x0107, 0x00E7,
				0x010D, 0x00E9, 0x0119, 0x00EB, 0x011B, 0x00ED, 0x00EE, 0x010F,
	/* 0xF0 */	0x0111, 0x0144, 0x0148, 0x00F3, 0x00F4, 0x0151, 0x00F6, 0x00F7,
				0x0159, 0x016F, 0x00FA, 0x0171, 0x00FC, 0x00FD, 0x0163, 0x02D9
	};
	const uchar UCStoISO88592_00A0[] = {
		0xA0, N__A, N__A, N__A, 0xA4, N__A, N__A, 0xA7, 0xA8, N__A, N__A, N__A, N__A, 0xAD, N__A, N__A,
		0xB0, N__A, N__A, N__A, 0xB4, N__A, N__A, N__A, 0xB8, N__A, N__A, N__A, N__A, N__A, N__A, N__A,
		N__A, 0xC1, 0xC2, N__A, 0xC4, N__A, N__A, 0xC7, N__A, 0xC9, N__A, 0xCB, N__A, 0xCD, 0xCE, N__A,
		N__A, N__A, N__A, 0xD3, 0xD4, N__A, 0xD6, 0xD7, N__A, N__A, 0xDA, N__A, 0xDC, 0xDD, N__A, 0xDF,
		N__A, 0xE1, 0xE2, N__A, 0xE4, N__A, N__A, 0xE7, N__A, 0xE9, N__A, 0xEB, N__A, 0xED, 0xEE, N__A,
		N__A, N__A, N__A, 0xF3, 0xF4, N__A, 0xF6, 0xF7, N__A, N__A, 0xFA, N__A, 0xFC, 0xFD, N__A, N__A,
		N__A, N__A, 0xC3, 0xE3, 0xA1, 0xB1, 0xC6, 0xE6, N__A, N__A, N__A, N__A, 0xC8, 0xE8, 0xCF, 0xEF,
		0xD0, 0xF0, N__A, N__A, N__A, N__A, N__A, N__A, 0xCA, 0xEA, 0xCC, 0xEC, N__A, N__A, N__A, N__A,
		N__A, N__A, N__A, N__A, N__A, N__A, N__A, N__A, N__A, N__A, N__A, N__A, N__A, N__A, N__A, N__A,
		N__A, N__A, N__A, N__A, N__A, N__A, N__A, N__A, N__A, 0xC5, 0xE5, N__A, N__A, 0xA5, 0xB5, N__A,
		N__A, 0xA3, 0xB3, 0xD1, 0xF1, N__A, N__A, 0xD2, 0xF2, N__A, N__A, N__A, N__A, N__A, N__A, N__A,
		0xD5, 0xF5, N__A, N__A, 0xC0, 0xE0, N__A, N__A, 0xD8, 0xF8, 0xA6, 0xB6, N__A, N__A, 0xAA, 0xBA,
		0xA9, 0xB9, 0xDE, 0xFE, 0xAB, 0xBB, N__A, N__A, N__A, N__A, N__A, N__A, N__A, N__A, 0xD9, 0xF9,
		0xDB, 0xFB, N__A, N__A, N__A, N__A, N__A, N__A, N__A, 0xAC, 0xBC, 0xAF, 0xBF, 0xAE, 0xBE
	};
	const uchar UCStoISO88592_02C7[] = {
												  0xB7, N__A, N__A, N__A, N__A, N__A, N__A, N__A, N__A,
		N__A, N__A, N__A, N__A, N__A, N__A, N__A, N__A, 0xA2, 0xFF, N__A, 0xB2, N__A, 0xBD
	};
	const Char ISO88593toUCS_A0[] = {
	/* 0xA0 */	0x00A0, 0x0126, 0x02D8, 0x00A3, 0x00A4, RP__CH, 0x0124, 0x00A7,
				0x00A8, 0x0130, 0x015E, 0x011E, 0x0134, 0x00AD, RP__CH, 0x017B,
	/* 0xB0 */	0x00B0, 0x0127, 0x00B2, 0x00B3, 0x00B4, 0x00B5, 0x0125, 0x00B7,
				0x00B8, 0x0131, 0x015F, 0x011F, 0x0135, 0x00BD, RP__CH, 0x017C,
	/* 0xC0 */	0x00C0, 0x00C1, 0x00C2, RP__CH, 0x00C4, 0x010A, 0x0108, 0x00C7,
				0x00C8, 0x00C9, 0x00CA, 0x00CB, 0x00CC, 0x00CD, 0x00CE, 0x00CF,
	/* 0xD0 */	RP__CH, 0x00D1, 0x00D2, 0x00D3, 0x00D4, 0x0120, 0x00D6, 0x00D7,
				0x011C, 0x00D9, 0x00DA, 0x00DB, 0x00DC, 0x016C, 0x015C, 0x00DF,
	/* 0xE0 */	0x00E0, 0x00E1, 0x00E2, RP__CH, 0x00E4, 0x010B, 0x0109, 0x00E7,
				0x00E8, 0x00E9, 0x00EA, 0x00EB, 0x00EC, 0x00ED, 0x00EE, 0x00EF,
	/* 0xF0 */	RP__CH, 0x00F1, 0x00F2, 0x00F3, 0x00F4, 0x0121, 0x00F6, 0x00F7,
				0x011D, 0x00F9, 0x00FA, 0x00FB, 0x00FC, 0x016D, 0x015D, 0x02D9
	};
	const uchar UCStoISO88593_00A0[] = {
		0xA0, N__A, N__A, 0xA3, 0xA4, N__A, N__A, 0xA7, 0xA8, N__A, N__A, N__A, N__A, 0xAD, N__A, N__A,
		0xB0, N__A, 0xB2, 0xB3, 0xB4, 0xB5, N__A, 0xB7, 0xB8, N__A, N__A, N__A, N__A, 0xBD, N__A, N__A,
		0xC0, 0xC1, 0xC2, N__A, 0xC4, N__A, N__A, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF,
		N__A, 0xD1, 0xD2, 0xD3, 0xD4, N__A, 0xD6, 0xD7, N__A, 0xD9, 0xDA, 0xDB, 0xDC, N__A, N__A, 0xDF,
		0xE0, 0xE1, 0xE2, N__A, 0xE4, N__A, N__A, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF,
		N__A, 0xF1, 0xF2, 0xF3, 0xF4, N__A, 0xF6, 0xF7, N__A, 0xF9, 0xFA, 0xFB, 0xFC, N__A, N__A, N__A,
		N__A, N__A, N__A, N__A, N__A, N__A, N__A, N__A, 0xC6, 0xE6, 0xC5, 0xE5, N__A, N__A, N__A, N__A,
		N__A, N__A, N__A, N__A, N__A, N__A, N__A, N__A, N__A, N__A, N__A, N__A, 0xD8, 0xF8, 0xAB, 0xBB,
		0xD5, 0xF5, N__A, N__A, 0xA6, 0xB6, 0xA1, 0xB1, N__A, N__A, N__A, N__A, N__A, N__A, N__A, N__A,
		0xA9, 0xB9, N__A, N__A, 0xAC, 0xBC
	};
	const uchar UCStoISO88593_015C[] = {
																				0xDE, 0xFE, 0xAA, 0xBA,
		N__A, N__A, N__A, N__A, N__A, N__A, N__A, N__A, N__A, N__A, N__A, N__A, 0xDD, 0xFD, N__A, N__A,
		N__A, N__A, N__A, N__A, N__A, N__A, N__A, N__A, N__A, N__A, N__A, 0xAF, 0xBF
	};
	const uchar UCStoISO88593_02D8[] = {
		0xA2, 0xFF
	};
	const Char ISO88594toUCS_A0[] = {
		0x00A0, 0x0104, 0x0138, 0x0156, 0x00A4, 0x0128, 0x013B, 0x00A7,
		0x00A8, 0x0160, 0x0112, 0x0122, 0x0166, 0x00AD, 0x017D, 0x00AF,
		0x00B0, 0x0105, 0x02DB, 0x0157, 0x00B4, 0x0129, 0x013C, 0x02C7,
		0x00B8, 0x0161, 0x0113, 0x0123, 0x0167, 0x014A, 0x017E, 0x014B,
		0x0100, 0x00C1, 0x00C2, 0x00C3, 0x00C4, 0x00C5, 0x00C6, 0x012E,
		0x010C, 0x00C9, 0x0118, 0x00CB, 0x0116, 0x00CD, 0x00CE, 0x012A,
		0x0110, 0x0145, 0x014C, 0x0136, 0x00D4, 0x00D5, 0x00D6, 0x00D7,
		0x00D8, 0x0172, 0x00DA, 0x00DB, 0x00DC, 0x0168, 0x016A, 0x00DF,
		0x0101, 0x00E1, 0x00E2, 0x00E3, 0x00E4, 0x00E5, 0x00E6, 0x012F,
		0x010D, 0x00E9, 0x0119, 0x00EB, 0x0117, 0x00ED, 0x00EE, 0x012B,
		0x0111, 0x0146, 0x014D, 0x0137, 0x00F4, 0x00F5, 0x00F6, 0x00F7,
		0x00F8, 0x0173, 0x00FA, 0x00FB, 0x00FC, 0x0169, 0x016B, 0x02D9
	};
	const uchar UCStoISO88594_00A0[] = {
		0xA0, N__A, N__A, N__A, 0xA4, N__A, N__A, 0xA7, 0xA8, N__A, N__A, N__A, N__A, 0xAD, N__A, 0xAF, 
		0xB0, N__A, N__A, N__A, 0xB4, N__A, N__A, N__A, 0xB8, N__A, N__A, N__A, N__A, N__A, N__A, N__A,
		N__A, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, N__A, N__A, 0xC9, N__A, 0xCB, N__A, 0xCD, 0xCE, N__A,
		N__A, N__A, N__A, N__A, 0xD4, 0xD5, 0xD6, 0xD7, 0xD8, N__A, 0xDA, 0xDB, 0xDC, N__A, N__A, 0xDF,
		N__A, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, N__A, N__A, 0xE9, N__A, 0xEB, N__A, 0xED, 0xEE, N__A,
		N__A, N__A, N__A, N__A, 0xF4, 0xF5, 0xF6, 0xF7, 0xF8, N__A, 0xFA, 0xFB, 0xFC, N__A, N__A, N__A,
		0xC0, 0xE0, N__A, N__A, 0xA1, 0xB1, N__A, N__A, N__A, N__A, N__A, N__A, 0xC8, 0xE8, N__A, N__A,
		0xD0, 0xF0, 0xAA, 0xBA, N__A, N__A, 0xCC, 0xEC, 0xCA, 0xEA, N__A, N__A, N__A, N__A, N__A, N__A,
		N__A, N__A, 0xAB, 0xBB, N__A, N__A, N__A, N__A, 0xA5, 0xB5, 0xCF, 0xEF, N__A, N__A, 0xC7, 0xE7,
		N__A, N__A, N__A, N__A, N__A, N__A, 0xD3, 0xF3, 0xA2, N__A, N__A, 0xA6, 0xB6, N__A, N__A, N__A,
		N__A, N__A, N__A, N__A, N__A, 0xD1, 0xF1, N__A, N__A, N__A, 0xBD, 0xBF, 0xD2, 0xF2, N__A, N__A,
		N__A, N__A, N__A, N__A, N__A, N__A, 0xA3, 0xB3, N__A, N__A, N__A, N__A, N__A, N__A, N__A, N__A,
		0xA9, 0xB9, N__A, N__A, N__A, N__A, 0xAC, 0xBC, 0xDD, 0xFD, 0xDE, 0xFE, N__A, N__A, N__A, N__A,
		N__A, N__A, 0xD9, 0xF9, N__A, N__A, N__A, N__A, N__A, N__A, N__A, N__A, N__A, 0xAE, 0xBE
	};
	const uchar UCStoISO88594_02C7[] = {
												  0xB7, N__A, N__A, N__A, N__A, N__A, N__A, N__A, N__A, 
		N__A, N__A, N__A, N__A, N__A, N__A, N__A, N__A, N__A, 0xFF, N__A, 0xB2
	};
	const Char ISO88595toUCS_A0[] = {
		0x00A0, 0x0401, 0x0402, 0x0403, 0x0404, 0x0405, 0x0406, 0x0407,
		0x0408, 0x0409, 0x040A, 0x040B, 0x040C, 0x00AD, 0x040E, 0x040F, 
		0x0410, 0x0411, 0x0412, 0x0413, 0x0414, 0x0415, 0x0416, 0x0417,
		0x0418, 0x0419, 0x041A, 0x041B, 0x041C, 0x041D, 0x041E, 0x041F, 
		0x0420, 0x0421, 0x0422, 0x0423, 0x0424, 0x0425, 0x0426, 0x0427,
		0x0428, 0x0429, 0x042A, 0x042B, 0x042C, 0x042D, 0x042E, 0x042F, 
		0x0430, 0x0431, 0x0432, 0x0433, 0x0434, 0x0435, 0x0436, 0x0437,
		0x0438, 0x0439, 0x043A, 0x043B, 0x043C, 0x043D, 0x043E, 0x043F, 
		0x0440, 0x0441, 0x0442, 0x0443, 0x0444, 0x0445, 0x0446, 0x0447,
		0x0448, 0x0449, 0x044A, 0x044B, 0x044C, 0x044D, 0x044E, 0x044F, 
		0x2116, 0x0451, 0x0452, 0x0453, 0x0454, 0x0455, 0x0456, 0x0457,
		0x0458, 0x0459, 0x045A, 0x045B, 0x045C, 0x00A7, 0x045E, 0x045F,
	};
	const uchar UCStoISO88595_00A0[] = {
		0xA0, N__A, N__A, N__A, N__A, N__A, N__A, 0xFD, N__A, N__A, N__A, N__A, N__A, 0xAD
	};
	const uchar UCStoISO88595_0401[] = {
			  0xA1, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0xAA, 0xAB, 0xAC, N__A, 0xAE, 0xAF,
		0xB0, 0xB1, 0xB2, 0xB3, 0xB4, 0xB5, 0xB6, 0xB7, 0xB8, 0xB9, 0xBA, 0xBB, 0xBC, 0xBD, 0xBE, 0xBF,
		0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF,
		0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD7, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0xDF,
		0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF,
		N__A, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, N__A, 0xFE, 0xFF
	};
	const uchar UCStoISO88595_2116[] = {
											0xF0
	};
	const Char ISO88596toUCS_A0[] = {
		0x00A0, RP__CH, RP__CH, RP__CH, 0x00A4, RP__CH, RP__CH, RP__CH,
		RP__CH, RP__CH, RP__CH, RP__CH, 0x060C, 0x00AD, RP__CH, RP__CH, 
		RP__CH, RP__CH, RP__CH, RP__CH, RP__CH, RP__CH, RP__CH, RP__CH,
		RP__CH, RP__CH, RP__CH, 0x061B, RP__CH, RP__CH, RP__CH, 0x061F, 
		RP__CH, 0x0621, 0x0622, 0x0623, 0x0624, 0x0625, 0x0626, 0x0627,
		0x0628, 0x0629, 0x062A, 0x062B, 0x062C, 0x062D, 0x062E, 0x062F, 
		0x0630, 0x0631, 0x0632, 0x0633, 0x0634, 0x0635, 0x0636, 0x0637,
		0x0638, 0x0639, 0x063A, RP__CH, RP__CH, RP__CH, RP__CH, RP__CH, 
		0x0640, 0x0641, 0x0642, 0x0643, 0x0644, 0x0645, 0x0646, 0x0647,
		0x0648, 0x0649, 0x064A, 0x064B, 0x064C, 0x064D, 0x064E, 0x064F, 
		0x0650, 0x0651, 0x0652
	};
	const uchar UCStoISO88596_00A0[] = {
		0xA0, N__A, N__A, N__A, 0xA4, N__A, N__A, N__A, N__A, N__A, N__A, N__A, N__A, N__A, 0xAD
	};
	const uchar UCStoISO88596_060C[] = {
																				0xAC, N__A, N__A, N__A,
		N__A, N__A, N__A, N__A, N__A, N__A, N__A, N__A, N__A, N__A, N__A, 0xBB, N__A, N__A, N__A, 0xBF,
		N__A, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF,
		0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD7, 0xD8, 0xD9, 0xDA, N__A, N__A, N__A, N__A, N__A,
		0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF,
		0xF0, 0xF1, 0xF2
	};
	const Char ISO88597toUCS_A0[] = {
		0x00A0, 0x2018, 0x2019, 0x00A3, 0x20AC, 0x20AF, 0x00A6, 0x00A7,
		0x00A8, 0x00A9, 0x037A, 0x00AB, 0x00AC, 0x00AD, RP__CH, 0x2015,
		0x00B0, 0x00B1, 0x00B2, 0x00B3, 0x0384, 0x0385, 0x0386, 0x00B7,
		0x0388, 0x0389, 0x038A, 0x00BB, 0x038C, 0x00BD, 0x038E, 0x038F,
		0x0390, 0x0391, 0x0392, 0x0393, 0x0394, 0x0395, 0x0396, 0x0397,
		0x0398, 0x0399, 0x039A, 0x039B, 0x039C, 0x039D, 0x039E, 0x039F,
		0x03A0, 0x03A1, RP__CH, 0x03A3, 0x03A4, 0x03A5, 0x03A6, 0x03A7,
		0x03A8, 0x03A9, 0x03AA, 0x03AB, 0x03AC, 0x03AD, 0x03AE, 0x03AF,
		0x03B0, 0x03B1, 0x03B2, 0x03B3, 0x03B4, 0x03B5, 0x03B6, 0x03B7,
		0x03B8, 0x03B9, 0x03BA, 0x03BB, 0x03BC, 0x03BD, 0x03BE, 0x03BF,
		0x03C0, 0x03C1, 0x03C2, 0x03C3, 0x03C4, 0x03C5, 0x03C6, 0x03C7,
		0x03C8, 0x03C9, 0x03CA, 0x03CB, 0x03CC, 0x03CD, 0x03CE
	};
	const uchar UCStoISO88597_00A0[] = {
		0xA0, N__A, N__A, 0xA3, N__A, N__A, 0xA6, 0xA7, 0xA8, 0xA9, N__A, 0xAB, 0xAC, 0xAD, N__A, N__A,
		0xB0, 0xB1, 0xB2, 0xB3, N__A, N__A, N__A, 0xB7, N__A, N__A, N__A, 0xBB, N__A, 0xBD
	};
	const uchar UCStoISO88597_037A[] = {
																	0xAA, N__A, N__A, N__A, N__A, N__A,
		N__A, N__A, N__A, N__A, 0xB4, 0xB5, 0xB6, N__A, 0xB8, 0xB9, 0xBA, N__A, 0xBC, N__A, 0xBE, 0xBF,
		0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF,
		0xD0, 0xD1, N__A, 0xD3, 0xD4, 0xD5, 0xD6, 0xD7, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0xDF,
		0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF,
		0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 
	};
	const uchar UCStoISO88597_2015[] = {
									  0xAF, N__A, N__A, 0xA1, 0xA2
	};
	const uchar UCStoISO88597_20AC[] = {
																				0xA4, N__A, N__A, 0xA5
	};
	const Char ISO88598toUCS_A0[] = {
		0x00A0, RP__CH, 0x00A2, 0x00A3, 0x00A4, 0x00A5, 0x00A6, 0x00A7,
		0x00A8, 0x00A9, 0x00D7, 0x00AB, 0x00AC, 0x00AD, 0x00AE, 0x00AF, 
		0x00B0, 0x00B1, 0x00B2, 0x00B3, 0x00B4, 0x00B5, 0x00B6, 0x00B7,
		0x00B8, 0x00B9, 0x00F7, 0x00BB, 0x00BC, 0x00BD, 0x00BE, RP__CH, 
		RP__CH, RP__CH, RP__CH, RP__CH, RP__CH, RP__CH, RP__CH, RP__CH,
		RP__CH, RP__CH, RP__CH, RP__CH, RP__CH, RP__CH, RP__CH, RP__CH, 
		RP__CH, RP__CH, RP__CH, RP__CH, RP__CH, RP__CH, RP__CH, RP__CH,
		RP__CH, RP__CH, RP__CH, RP__CH, RP__CH, RP__CH, RP__CH, 0x2017, 
		0x05D0, 0x05D1, 0x05D2, 0x05D3, 0x05D4, 0x05D5, 0x05D6, 0x05D7,
		0x05D8, 0x05D9, 0x05DA, 0x05DB, 0x05DC, 0x05DD, 0x05DE, 0x05DF, 
		0x05E0, 0x05E1, 0x05E2, 0x05E3, 0x05E4, 0x05E5, 0x05E6, 0x05E7,
		0x05E8, 0x05E9, 0x05EA, RP__CH, RP__CH, 0x200E, 0x200F
	};
	const uchar UCStoISO88598_00A0[] = {
		0xA0, N__A, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6, 0xA7, 0xA8, 0xA9, N__A, 0xAB, 0xAC, 0xAD, 0xAE, 0xAF,
		0xB0, 0xB1, 0xB2, 0xB3, 0xB4, 0xB5, 0xB6, 0xB7, 0xB8, 0xB9, N__A, 0xBB, 0xBC, 0xBD, 0xBE
	};
	const uchar UCStoISO88598_00D7[] = {
												  0xAA
	};
	const uchar UCStoISO88598_00F7[] = {
												  0xBA
	};
	const uchar UCStoISO88598_05D0[] = {
		0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF,
		0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7, 0xF8, 0xF9, 0xFA
	};
	const uchar UCStoISO88598_200E[] = {
																							0xFD, 0xFE,
		N__A, N__A, N__A, N__A, N__A, N__A, N__A, 0xDF
	};
	const Char ISO88599toUCS_A0[] = {
		0x00A0, 0x00A1, 0x00A2, 0x00A3, 0x00A4, 0x00A5, 0x00A6, 0x00A7,
		0x00A8, 0x00A9, 0x00AA, 0x00AB, 0x00AC, 0x00AD, 0x00AE, 0x00AF, 
		0x00B0, 0x00B1, 0x00B2, 0x00B3, 0x00B4, 0x00B5, 0x00B6, 0x00B7,
		0x00B8, 0x00B9, 0x00BA, 0x00BB, 0x00BC, 0x00BD, 0x00BE, 0x00BF, 
		0x00C0, 0x00C1, 0x00C2, 0x00C3, 0x00C4, 0x00C5, 0x00C6, 0x00C7,
		0x00C8, 0x00C9, 0x00CA, 0x00CB, 0x00CC, 0x00CD, 0x00CE, 0x00CF, 
		0x011E, 0x00D1, 0x00D2, 0x00D3, 0x00D4, 0x00D5, 0x00D6, 0x00D7,
		0x00D8, 0x00D9, 0x00DA, 0x00DB, 0x00DC, 0x0130, 0x015E, 0x00DF, 
		0x00E0, 0x00E1, 0x00E2, 0x00E3, 0x00E4, 0x00E5, 0x00E6, 0x00E7,
		0x00E8, 0x00E9, 0x00EA, 0x00EB, 0x00EC, 0x00ED, 0x00EE, 0x00EF, 
		0x011F, 0x00F1, 0x00F2, 0x00F3, 0x00F4, 0x00F5, 0x00F6, 0x00F7,
		0x00F8, 0x00F9, 0x00FA, 0x00FB, 0x00FC, 0x0131, 0x015F, 0x00FF
	};
	const uchar UCStoISO88599_00A0[] = {
		0xA0, 0xA1, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0xAF,
		0xB0, 0xB1, 0xB2, 0xB3, 0xB4, 0xB5, 0xB6, 0xB7, 0xB8, 0xB9, 0xBA, 0xBB, 0xBC, 0xBD, 0xBE, 0xBF,
		0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF,
		N__A, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD7, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, N__A, N__A, 0xDF,
		0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF,
		N__A, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, N__A, N__A, 0xFF
	};
	const uchar UCStoISO88599_011E[] = {
																							0xD0, 0xF0
	};
	const uchar UCStoISO88599_0130[] = {
		0xDD, 0xFD
	};
	const uchar UCStoISO88599_015E[] = {
																							0xDE, 0xFE
	};
	const Char ISO885910toUCS_A0[] = {
		0x00A0, 0x0104, 0x0112, 0x0122, 0x012A, 0x0128, 0x0136, 0x00A7, 0x013B, 0x0110, 0x0160, 0x0166, 0x017D, 0x00AD, 0x016A, 0x014A,
		0x00B0, 0x0105, 0x0113, 0x0123, 0x012B, 0x0129, 0x0137, 0x00B7, 0x013C, 0x0111, 0x0161, 0x0167, 0x017E, 0x2015, 0x016B, 0x014B,
		0x0100, 0x00C1, 0x00C2, 0x00C3, 0x00C4, 0x00C5, 0x00C6, 0x012E, 0x010C, 0x00C9, 0x0118, 0x00CB, 0x0116, 0x00CD, 0x00CE, 0x00CF,
		0x00D0, 0x0145, 0x014C, 0x00D3, 0x00D4, 0x00D5, 0x00D6, 0x0168, 0x00D8, 0x0172, 0x00DA, 0x00DB, 0x00DC, 0x00DD, 0x00DE, 0x00DF,
		0x0101, 0x00E1, 0x00E2, 0x00E3, 0x00E4, 0x00E5, 0x00E6, 0x012F, 0x010D, 0x00E9, 0x0119, 0x00EB, 0x0117, 0x00ED, 0x00EE, 0x00EF,
		0x00F0, 0x0146, 0x014D, 0x00F3, 0x00F4, 0x00F5, 0x00F6, 0x0169, 0x00F8, 0x0173, 0x00FA, 0x00FB, 0x00FC, 0x00FD, 0x00FE, 0x0138
	};
	const uchar UCStoISO885910_00A0[] = {
		0xA0, N__A, N__A, N__A, N__A, N__A, N__A, 0xA7, N__A, N__A, N__A, N__A, N__A, 0xAD, N__A, N__A,
		0xB0, N__A, N__A, N__A, N__A, N__A, N__A, 0xB7, N__A, N__A, N__A, N__A, N__A, N__A, N__A, N__A,
		N__A, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, N__A, N__A, 0xC9, N__A, 0xCB, N__A, 0xCD, 0xCE, 0xCF,
		0xD0, N__A, N__A, 0xD3, 0xD4, 0xD5, 0xD6, N__A, 0xD8, N__A, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0xDF,
		N__A, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, N__A, N__A, 0xE9, N__A, 0xEB, N__A, 0xED, 0xEE, 0xEF,
		0xF0, N__A, N__A, 0xF3, 0xF4, 0xF5, 0xF6, N__A, 0xF8, N__A, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, N__A,
		0xC0, 0xE0, N__A, N__A, 0xA1, 0xB1, N__A, N__A, N__A, N__A, N__A, N__A, 0xC8, 0xE8, N__A, N__A,
		0xA9, 0xB9, 0xA2, 0xB2, N__A, N__A, 0xCC, 0xEC, 0xCA, 0xEA, N__A, N__A, N__A, N__A, N__A, N__A,
		N__A, N__A, 0xA3, 0xB3, N__A, N__A, N__A, N__A, 0xA5, 0xB5, 0xA4, 0xB4, N__A, N__A, 0xC7, 0xE7,
		N__A, N__A, N__A, N__A, N__A, N__A, 0xA6, 0xB6, 0xFF, N__A, N__A, 0xA8, 0xB8, N__A, N__A, N__A,
		N__A, N__A, N__A, N__A, N__A, 0xD1, 0xF1, N__A, N__A, N__A, 0xAF, 0xBF, 0xD2, 0xF2, N__A, N__A,
		N__A, N__A, N__A, N__A, N__A, N__A, N__A, N__A, N__A, N__A, N__A, N__A, N__A, N__A, N__A, N__A,
		0xAA, 0xBA, N__A, N__A, N__A, N__A, 0xAB, 0xBB, 0xD7, 0xF7, 0xAE, 0xBE, N__A, N__A, N__A, N__A,
		N__A, N__A, 0xD9, 0xF9, N__A, N__A, N__A, N__A, N__A, N__A, N__A, N__A, N__A, 0xAC, 0xBC
	};
	const uchar UCStoISO885910_2015[] = {
									  0xBD
	};
	const Char ISO885913toUCS_A0[] = {
		0x00A0, 0x201D, 0x00A2, 0x00A3, 0x00A4, 0x201E, 0x00A6, 0x00A7, 0x00D8, 0x00A9, 0x0156, 0x00AB, 0x00AC, 0x00AD, 0x00AE, 0x00C6,
		0x00B0, 0x00B1, 0x00B2, 0x00B3, 0x201C, 0x00B5, 0x00B6, 0x00B7, 0x00F8, 0x00B9, 0x0157, 0x00BB, 0x00BC, 0x00BD, 0x00BE, 0x00E6,
		0x0104, 0x012E, 0x0100, 0x0106, 0x00C4, 0x00C5, 0x0118, 0x0112, 0x010C, 0x00C9, 0x0179, 0x0116, 0x0122, 0x0136, 0x012A, 0x013B,
		0x0160, 0x0143, 0x0145, 0x00D3, 0x014C, 0x00D5, 0x00D6, 0x00D7, 0x0172, 0x0141, 0x015A, 0x016A, 0x00DC, 0x017B, 0x017D, 0x00DF,
		0x0105, 0x012F, 0x0101, 0x0107, 0x00E4, 0x00E5, 0x0119, 0x0113, 0x010D, 0x00E9, 0x017A, 0x0117, 0x0123, 0x0137, 0x012B, 0x013C,
		0x0161, 0x0144, 0x0146, 0x00F3, 0x014D, 0x00F5, 0x00F6, 0x00F7, 0x0173, 0x0142, 0x015B, 0x016B, 0x00FC, 0x017C, 0x017E, 0x2019
	};
	const uchar UCStoISO885913_00A0[] = {
		0xA0, N__A, 0xA2, 0xA3, 0xA4, N__A, 0xA6, 0xA7, N__A, 0xA9, N__A, 0xAB, 0xAC, 0xAD, 0xAE, N__A,
		0xB0, 0xB1, 0xB2, 0xB3, N__A, 0xB5, 0xB6, 0xB7, N__A, 0xB9, N__A, 0xBB, 0xBC, 0xBD, 0xBE, N__A,
		N__A, N__A, N__A, N__A, 0xC4, 0xC5, 0xAF, N__A, N__A, 0xC9, N__A, N__A, N__A, N__A, N__A, N__A,
		N__A, N__A, N__A, 0xD3, N__A, 0xD5, 0xD6, 0xD7, 0xA8, N__A, N__A, N__A, 0xDC, N__A, N__A, 0xDF,
		N__A, N__A, N__A, N__A, 0xE4, 0xE5, 0xBF, N__A, N__A, 0xE9, N__A, N__A, N__A, N__A, N__A, N__A,
		N__A, N__A, N__A, 0xF3, N__A, 0xF5, 0xF6, 0xF7, 0xB8, N__A, N__A, N__A, 0xFC, N__A, N__A, N__A,
		0xC2, 0xE2, N__A, N__A, 0xC0, 0xE0, 0xC3, 0xE3, N__A, N__A, N__A, N__A, 0xC8, 0xE8, N__A, N__A,
		N__A, N__A, 0xC7, 0xE7, N__A, N__A, 0xCB, 0xEB, 0xC6, 0xE6, N__A, N__A, N__A, N__A, N__A, N__A,
		N__A, N__A, 0xCC, 0xEC, N__A, N__A, N__A, N__A, N__A, N__A, 0xCE, 0xEE, N__A, N__A, 0xC1, 0xE1,
		N__A, N__A, N__A, N__A, N__A, N__A, N__A, 0xCD, 0xED, N__A, N__A, N__A, 0xCF, 0xEF, N__A, N__A,
		N__A, 0xD9, 0xF9, 0xD1, 0xF1, 0xD2, 0xF2, N__A, N__A, N__A, N__A, N__A, 0xD4, 0xF4, N__A, N__A,
		N__A, N__A, N__A, N__A, N__A, N__A, 0xAA, 0xBA, N__A, N__A, 0xDA, 0xFA, N__A, N__A, N__A, N__A,
		0xD0, 0xF0, N__A, N__A, N__A, N__A, N__A, N__A, N__A, N__A, 0xDB, 0xFB, N__A, N__A, N__A, N__A,
		N__A, N__A, 0xD8, 0xF8, N__A, N__A, N__A, N__A, N__A, 0xCA, 0xEA, 0xDD, 0xFD, 0xDE, 0xFE
	};
	const uchar UCStoISO885913_2019[] = {
															  0xFF, N__A, N__A, 0xB4, 0xA1, 0xA5
	};
	const Char ISO885914toUCS_A0[] = {
		0x00A0, 0x1E02, 0x1E03, 0x00A3, 0x010A, 0x010B, 0x1E0A, 0x00A7, 0x1E80, 0x00A9, 0x1E82, 0x1E0B, 0x1EF2, 0x00AD, 0x00AE, 0x0178,
		0x1E1E, 0x1E1F, 0x0120, 0x0121, 0x1E40, 0x1E41, 0x00B6, 0x1E56, 0x1E81, 0x1E57, 0x1E83, 0x1E60, 0x1EF3, 0x1E84, 0x1E85, 0x1E61,
		0x00C0, 0x00C1, 0x00C2, 0x00C3, 0x00C4, 0x00C5, 0x00C6, 0x00C7, 0x00C8, 0x00C9, 0x00CA, 0x00CB, 0x00CC, 0x00CD, 0x00CE, 0x00CF,
		0x0174, 0x00D1, 0x00D2, 0x00D3, 0x00D4, 0x00D5, 0x00D6, 0x1E6A, 0x00D8, 0x00D9, 0x00DA, 0x00DB, 0x00DC, 0x00DD, 0x0176, 0x00DF,
		0x00E0, 0x00E1, 0x00E2, 0x00E3, 0x00E4, 0x00E5, 0x00E6, 0x00E7, 0x00E8, 0x00E9, 0x00EA, 0x00EB, 0x00EC, 0x00ED, 0x00EE, 0x00EF,
		0x0175, 0x00F1, 0x00F2, 0x00F3, 0x00F4, 0x00F5, 0x00F6, 0x1E6B, 0x00F8, 0x00F9, 0x00FA, 0x00FB, 0x00FC, 0x00FD, 0x0177, 0x00FF
	};
	const uchar UCStoISO885914_00A0[] = {
		0xA0, N__A, N__A, 0xA3, N__A, N__A, N__A, 0xA7, N__A, 0xA9, N__A, N__A, N__A, 0xAD, 0xAE, N__A,
		N__A, N__A, N__A, N__A, N__A, N__A, 0xB6, N__A, N__A, N__A, N__A, N__A, N__A, N__A, N__A, N__A,
		0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF,
		N__A, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, N__A, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, N__A, 0xDF,
		0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF,
		N__A, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, N__A, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, N__A, 0xFF,
		N__A, N__A, N__A, N__A, N__A, N__A, N__A, N__A, N__A, N__A, 0xA4, 0xA5, N__A, N__A, N__A, N__A,
		N__A, N__A, N__A, N__A, N__A, N__A, N__A, N__A, N__A, N__A, N__A, N__A, N__A, N__A, N__A, N__A,
		0xB2, 0xB3
	};
	const uchar UCStoISO885914_0174[] = {
								0xD0, 0xF0, 0xDE, 0xFE, 0xAF
	};
	const uchar UCStoISO885914_1E02[] = {
					0xA1, 0xA2, N__A, N__A, N__A, N__A, N__A, N__A, 0xA6, 0xAB, N__A, N__A, N__A, N__A,
		N__A, N__A, N__A, N__A, N__A, N__A, N__A, N__A, N__A, N__A, N__A, N__A, N__A, N__A, 0xB0, 0xB1
	};
	const uchar UCStoISO885914_1E40[] = {
		0xB4, 0xB5, N__A, N__A, N__A, N__A, N__A, N__A, N__A, N__A, N__A, N__A, N__A, N__A, N__A, N__A,
		N__A, N__A, N__A, N__A, N__A, N__A, 0xB7, 0xB9, N__A, N__A, N__A, N__A, N__A, N__A, N__A, N__A,
		0xBB, 0xBF, N__A, N__A, N__A, N__A, N__A, N__A, N__A, N__A, 0xD7, 0xF7, N__A, N__A, N__A, N__A,
		N__A, N__A, N__A, N__A, N__A, N__A, N__A, N__A, N__A, N__A, N__A, N__A, N__A, N__A, N__A, N__A,
		0xA8, 0xB8, 0xAA, 0xBA, 0xBD, 0xBE
	};
	const uchar UCStoISO885914_1EF2[] = {
		N__A, N__A, 0xAC, 0xBC
	};
	const Char ISO885915toUCS_A0[] = {
		0x00A0, 0x00A1, 0x00A2, 0x00A3, 0x20AC, 0x00A5, 0x0160, 0x00A7, 0x0161, 0x00A9, 0x00AA, 0x00AB, 0x00AC, 0x00AD, 0x00AE, 0x00AF,
		0x00B0, 0x00B1, 0x00B2, 0x00B3, 0x017D, 0x00B5, 0x00B6, 0x00B7, 0x017E, 0x00B9, 0x00BA, 0x00BB, 0x0152, 0x0153, 0x0178, 0x00BF,
		0x00C0, 0x00C1, 0x00C2, 0x00C3, 0x00C4, 0x00C5, 0x00C6, 0x00C7, 0x00C8, 0x00C9, 0x00CA, 0x00CB, 0x00CC, 0x00CD, 0x00CE, 0x00CF,
		0x00D0, 0x00D1, 0x00D2, 0x00D3, 0x00D4, 0x00D5, 0x00D6, 0x00D7, 0x00D8, 0x00D9, 0x00DA, 0x00DB, 0x00DC, 0x00DD, 0x00DE, 0x00DF,
		0x00E0, 0x00E1, 0x00E2, 0x00E3, 0x00E4, 0x00E5, 0x00E6, 0x00E7, 0x00E8, 0x00E9, 0x00EA, 0x00EB, 0x00EC, 0x00ED, 0x00EE, 0x00EF,
		0x00F0, 0x00F1, 0x00F2, 0x00F3, 0x00F4, 0x00F5, 0x00F6, 0x00F7, 0x00F8, 0x00F9, 0x00FA, 0x00FB, 0x00FC, 0x00FD, 0x00FE, 0x00FF
	};
	const uchar UCStoISO885915_00A0[] = {
		0xA0, 0xA1, 0xA2, 0xA3, N__A, 0xA5, N__A, 0xA7, N__A, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0xAF,
		0xB0, 0xB1, 0xB2, 0xB3, N__A, 0xB5, 0xB6, 0xB7, N__A, 0xB9, 0xBA, 0xBB, N__A, N__A, N__A, 0xBF,
		0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF,
		0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD7, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0xDF,
		0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF,
		0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0xFF
	};
	const uchar UCStoISO885915_0152[] = {
					0xBC, 0xBD, N__A, N__A, N__A, N__A, N__A, N__A, N__A, N__A, N__A, N__A, N__A, N__A,
		0xA6, 0xA8, N__A, N__A, N__A, N__A, N__A, N__A, N__A, N__A, N__A, N__A, N__A, N__A, N__A, N__A,
		N__A, N__A, N__A, N__A, N__A, N__A, N__A, N__A, 0xBE, N__A, N__A, N__A, N__A, 0xB4, 0xB8
	};
	const uchar UCStoISO885915_20AC[] = {
																				0xA4
	};
	const Char ISO885916toUCS_A0[] = {
		0x00A0, 0x0104, 0x0105, 0x0141, 0x20AC, 0x201E, 0x0160, 0x00A7, 0x0161, 0x00A9, 0x0218, 0x00AB, 0x0179, 0x00AD, 0x017A, 0x017B,
		0x00B0, 0x00B1, 0x010C, 0x0142, 0x017D, 0x201D, 0x00B6, 0x00B7, 0x017E, 0x010D, 0x0219, 0x00BB, 0x0152, 0x0153, 0x0178, 0x017C,
		0x00C0, 0x00C1, 0x00C2, 0x0102, 0x00C4, 0x0106, 0x00C6, 0x00C7, 0x00C8, 0x00C9, 0x00CA, 0x00CB, 0x00CC, 0x00CD, 0x00CE, 0x00CF,
		0x0110, 0x0143, 0x00D2, 0x00D3, 0x00D4, 0x0150, 0x00D6, 0x015A, 0x0170, 0x00D9, 0x00DA, 0x00DB, 0x00DC, 0x0118, 0x021A, 0x00DF,
		0x00E0, 0x00E1, 0x00E2, 0x0103, 0x00E4, 0x0107, 0x00E6, 0x00E7, 0x00E8, 0x00E9, 0x00EA, 0x00EB, 0x00EC, 0x00ED, 0x00EE, 0x00EF,
		0x0111, 0x0144, 0x00F2, 0x00F3, 0x00F4, 0x0151, 0x00F6, 0x015B, 0x0171, 0x00F9, 0x00FA, 0x00FB, 0x00FC, 0x0119, 0x021B, 0x00FF
	};
	const uchar UCStoISO885916_00A0[] = {
		0xA0, N__A, N__A, N__A, N__A, N__A, N__A, 0xA7, N__A, 0xA9, N__A, 0xAB, N__A, 0xAD, N__A, N__A,
		0xB0, 0xB1, N__A, N__A, N__A, N__A, 0xB6, 0xB7, N__A, N__A, N__A, 0xBB, N__A, N__A, N__A, N__A,
		0xC0, 0xC1, 0xC2, N__A, 0xC4, N__A, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF,
		N__A, N__A, 0xD2, 0xD3, 0xD4, N__A, 0xD6, N__A, N__A, 0xD9, 0xDA, 0xDB, 0xDC, N__A, N__A, 0xDF,
		0xE0, 0xE1, 0xE2, N__A, 0xE4, N__A, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF,
		N__A, N__A, 0xF2, 0xF3, 0xF4, N__A, 0xF6, N__A, N__A, 0xF9, 0xFA, 0xFB, 0xFC, N__A, N__A, 0xFF,
		N__A, N__A, 0xC3, 0xE3, 0xA1, 0xA2, 0xC5, 0xE5, N__A, N__A, N__A, N__A, 0xB2, 0xB9, N__A, N__A,
		0xD0, 0xF0, N__A, N__A, N__A, N__A, N__A, N__A, 0xDD, 0xFD
	};
	const uchar UCStoISO885916_0141[] = {
			  0xA3, 0xB3, 0xD1, 0xF1, N__A, N__A, N__A, N__A, N__A, N__A, N__A, N__A, N__A, N__A, N__A,
		0xD5, 0xF5, 0xBC, 0xBD, N__A, N__A, N__A, N__A, N__A, N__A, 0xD7, 0xF7, N__A, N__A, N__A, N__A,
		0xA6, 0xA8, N__A, N__A, N__A, N__A, N__A, N__A, N__A, N__A, N__A, N__A, N__A, N__A, N__A, N__A,
		0xD8, 0xF8, N__A, N__A, N__A, N__A, N__A, N__A, 0xBE, 0xAC, 0xAE, 0xAF, 0xBF, 0xB4, 0xB8
	};
	const uchar UCStoISO885916_0218[] = {
														0xAA, 0xBA, 0xDE, 0xFE
	};
	const uchar UCStoISO885916_201D[] = {
																					  0xB5, 0xA5
	};
	const uchar UCStoISO885916_20AC[] = {
																				0xA4
	};
} // namespace @0


#define ASCENSION_BEGIN_TABLE_U2N()	\
	if(from < 0x00A0U) to = mask8Bit(from);
#define ASCENSION_TABLE_ENTRY_U2N(tableNamePrefix, tableOffset)														\
	else if(from >= 0x##tableOffset##U && from < 0x##tableOffset##U + countof(tableNamePrefix##_##tableOffset))	\
		to = tableNamePrefix##_##tableOffset[from - 0x##tableOffset];
#define ASCENSION_END_TABLE_U2N()	\
	else return false; return true;
#define ASCENSION_TABLE_N2U(tableName)																\
	if(from < 0xA0) to = from;																		\
	else if(from - 0xA0 < countof(tableName)														\
		&& tableName[from - 0xA0] != UNMAPPABLE_NATIVE_CHARACTER)	to = tableName[from - 0xA0];	\
	else return false; return true;


// ISO-8859-2 ///////////////////////////////////////////////////////////////

/// @see SBCSEncoder#doFromUnicode
inline bool ISO88592Encoder::doFromUnicode(uchar& to, Char from) const {
	ASCENSION_BEGIN_TABLE_U2N()
		ASCENSION_TABLE_ENTRY_U2N(UCStoISO88592, 00A0)
		ASCENSION_TABLE_ENTRY_U2N(UCStoISO88592, 02C7)
	ASCENSION_END_TABLE_U2N()
}

/// @see SBCSEncoder#doToUnicode
inline bool ISO88592Encoder::doToUnicode(Char& to, uchar from) const {
	ASCENSION_TABLE_N2U(ISO88592toUCS_A0)
}


// ISO-8859-3 ///////////////////////////////////////////////////////////////

/// @see SBCSEncoder#doFromUnicode
inline bool ISO88593Encoder::doFromUnicode(uchar& to, Char from) const {
	ASCENSION_BEGIN_TABLE_U2N()
		ASCENSION_TABLE_ENTRY_U2N(UCStoISO88593, 00A0)
		ASCENSION_TABLE_ENTRY_U2N(UCStoISO88593, 015C)
		ASCENSION_TABLE_ENTRY_U2N(UCStoISO88593, 02D8)
	ASCENSION_END_TABLE_U2N()
}

/// @see SBCSEncoder#doToUnicode
inline bool ISO88593Encoder::doToUnicode(Char& to, uchar from) const {
	ASCENSION_TABLE_N2U(ISO88593toUCS_A0)
}


// ISO-8859-4 ///////////////////////////////////////////////////////////////

/// @see SBCSEncoder#doFromUnicode
inline bool ISO88594Encoder::doFromUnicode(uchar& to, Char from) const {
	ASCENSION_BEGIN_TABLE_U2N()
		ASCENSION_TABLE_ENTRY_U2N(UCStoISO88594, 00A0)
		ASCENSION_TABLE_ENTRY_U2N(UCStoISO88594, 02C7)
	ASCENSION_END_TABLE_U2N()
}

/// @see SBCSEncoder#doToUnicode
inline bool ISO88594Encoder::doToUnicode(Char& to, uchar from) const {
	ASCENSION_TABLE_N2U(ISO88594toUCS_A0)
}


// ISO-8859-5 ///////////////////////////////////////////////////////////////

/// @see SBCSEncoder#doFromUnicode
inline bool ISO88595Encoder::doFromUnicode(uchar& to, Char from) const {
	ASCENSION_BEGIN_TABLE_U2N()
		ASCENSION_TABLE_ENTRY_U2N(UCStoISO88595, 00A0)
		ASCENSION_TABLE_ENTRY_U2N(UCStoISO88595, 0401)
		ASCENSION_TABLE_ENTRY_U2N(UCStoISO88595, 2116)
	ASCENSION_END_TABLE_U2N()
}

/// @see SBCSEncoder#doToUnicode
inline bool ISO88595Encoder::doToUnicode(Char& to, uchar from) const {
	ASCENSION_TABLE_N2U(ISO88595toUCS_A0)
}


// ISO-8859-6 ///////////////////////////////////////////////////////////////

/// @see SBCSEncoder#doFromUnicode
inline bool ISO88596Encoder::doFromUnicode(uchar& to, Char from) const {
	ASCENSION_BEGIN_TABLE_U2N()
		ASCENSION_TABLE_ENTRY_U2N(UCStoISO88596, 00A0)
		ASCENSION_TABLE_ENTRY_U2N(UCStoISO88596, 060C)
	ASCENSION_END_TABLE_U2N()
}

/// @see SBCSEncoder#doToUnicode
inline bool ISO88596Encoder::doToUnicode(Char& to, uchar from) const {
	ASCENSION_TABLE_N2U(ISO88596toUCS_A0)
}


// ISO-8859-7 ///////////////////////////////////////////////////////////////

/// @see SBCSEncoder#doFromUnicode
inline bool ISO88597Encoder::doFromUnicode(uchar& to, Char from) const {
	ASCENSION_BEGIN_TABLE_U2N()
		ASCENSION_TABLE_ENTRY_U2N(UCStoISO88597, 00A0)
		ASCENSION_TABLE_ENTRY_U2N(UCStoISO88597, 037A)
		ASCENSION_TABLE_ENTRY_U2N(UCStoISO88597, 2015)
		ASCENSION_TABLE_ENTRY_U2N(UCStoISO88597, 20AC)
	ASCENSION_END_TABLE_U2N()
}

/// @see SBCSEncoder#doToUnicode
inline bool ISO88597Encoder::doToUnicode(Char& to, uchar from) const {
	ASCENSION_TABLE_N2U(ISO88597toUCS_A0)
}


// ISO-8859-8 ///////////////////////////////////////////////////////////////

/// @see SBCSEncoder#doFromUnicode
inline bool ISO88598Encoder::doFromUnicode(uchar& to, Char from) const {
	ASCENSION_BEGIN_TABLE_U2N()
		ASCENSION_TABLE_ENTRY_U2N(UCStoISO88598, 00A0)
		ASCENSION_TABLE_ENTRY_U2N(UCStoISO88598, 00D7)
		ASCENSION_TABLE_ENTRY_U2N(UCStoISO88598, 00F7)
		ASCENSION_TABLE_ENTRY_U2N(UCStoISO88598, 05D0)
		ASCENSION_TABLE_ENTRY_U2N(UCStoISO88598, 200E)
	ASCENSION_END_TABLE_U2N()
}

/// @see SBCSEncoder#doToUnicode
inline bool ISO88598Encoder::doToUnicode(Char& to, uchar from) const {
	ASCENSION_TABLE_N2U(ISO88598toUCS_A0)
}


// ISO-8859-9 ///////////////////////////////////////////////////////////////

/// @see SBCSEncoder#doFromUnicode
inline bool ISO88599Encoder::doFromUnicode(uchar& to, Char from) const {
	ASCENSION_BEGIN_TABLE_U2N()
		ASCENSION_TABLE_ENTRY_U2N(UCStoISO88599, 00A0)
		ASCENSION_TABLE_ENTRY_U2N(UCStoISO88599, 011E)
		ASCENSION_TABLE_ENTRY_U2N(UCStoISO88599, 0130)
		ASCENSION_TABLE_ENTRY_U2N(UCStoISO88599, 015E)
	ASCENSION_END_TABLE_U2N()
}

/// @see SBCSEncoder#doToUnicode
inline bool ISO88599Encoder::doToUnicode(Char& to, uchar from) const {
	ASCENSION_TABLE_N2U(ISO88599toUCS_A0)
}


// ISO-8859-10 //////////////////////////////////////////////////////////////

/// @see SBCSEncoder#doFromUnicode
inline bool ISO885910Encoder::doFromUnicode(uchar& to, Char from) const {
	ASCENSION_BEGIN_TABLE_U2N()
		ASCENSION_TABLE_ENTRY_U2N(UCStoISO885910, 00A0)
		ASCENSION_TABLE_ENTRY_U2N(UCStoISO885910, 2015)
	ASCENSION_END_TABLE_U2N()
}

/// @see SBCSEncoder#doToUnicode
inline bool ISO885910Encoder::doToUnicode(Char& to, uchar from) const {
	ASCENSION_TABLE_N2U(ISO885910toUCS_A0)
}


#ifndef ASCENSION_NO_EXTENDED_ENCODINGS

// ISO-8859-13 //////////////////////////////////////////////////////////////

/// @see SBCSEncoder#doFromUnicode
inline bool ISO885913Encoder::doFromUnicode(uchar& to, Char from) const {
	ASCENSION_BEGIN_TABLE_U2N()
		ASCENSION_TABLE_ENTRY_U2N(UCStoISO885913, 00A0)
		ASCENSION_TABLE_ENTRY_U2N(UCStoISO885913, 2019)
	ASCENSION_END_TABLE_U2N()
}

/// @see SBCSEncoder#doToUnicode
inline bool ISO885913Encoder::doToUnicode(Char& to, uchar from) const {
	ASCENSION_TABLE_N2U(ISO885913toUCS_A0)
}


// ISO-8859-14 //////////////////////////////////////////////////////////////

/// @see SBCSEncoder#doFromUnicode
inline bool ISO885914Encoder::doFromUnicode(uchar& to, Char from) const {
	ASCENSION_BEGIN_TABLE_U2N()
		ASCENSION_TABLE_ENTRY_U2N(UCStoISO885914, 00A0)
		ASCENSION_TABLE_ENTRY_U2N(UCStoISO885914, 0174)
		ASCENSION_TABLE_ENTRY_U2N(UCStoISO885914, 1E02)
		ASCENSION_TABLE_ENTRY_U2N(UCStoISO885914, 1E40)
		ASCENSION_TABLE_ENTRY_U2N(UCStoISO885914, 1EF2)
	ASCENSION_END_TABLE_U2N()
}

/// @see SBCSEncoder#doToUnicode
inline bool ISO885914Encoder::doToUnicode(Char& to, uchar from) const {
	ASCENSION_TABLE_N2U(ISO885914toUCS_A0)
}


// ISO-8859-15 //////////////////////////////////////////////////////////////

/// @see SBCSEncoder#doFromUnicode
inline bool ISO885915Encoder::doFromUnicode(uchar& to, Char from) const {
	ASCENSION_BEGIN_TABLE_U2N()
		ASCENSION_TABLE_ENTRY_U2N(UCStoISO885915, 00A0)
		ASCENSION_TABLE_ENTRY_U2N(UCStoISO885915, 0152)
		ASCENSION_TABLE_ENTRY_U2N(UCStoISO885915, 20AC)
	ASCENSION_END_TABLE_U2N()
}

/// @see SBCSEncoder#doToUnicode
inline bool ISO885915Encoder::doToUnicode(Char& to, uchar from) const {
	ASCENSION_TABLE_N2U(ISO885915toUCS_A0)
}


// ISO-8859-16 //////////////////////////////////////////////////////////////

/// @see SBCSEncoder#doFromUnicode
inline bool ISO885916Encoder::doFromUnicode(uchar& to, Char from) const {
	ASCENSION_BEGIN_TABLE_U2N()
		ASCENSION_TABLE_ENTRY_U2N(UCStoISO885916, 00A0)
		ASCENSION_TABLE_ENTRY_U2N(UCStoISO885916, 0141)
		ASCENSION_TABLE_ENTRY_U2N(UCStoISO885916, 0218)
		ASCENSION_TABLE_ENTRY_U2N(UCStoISO885916, 201D)
		ASCENSION_TABLE_ENTRY_U2N(UCStoISO885916, 20AC)
	ASCENSION_END_TABLE_U2N()
}

/// @see SBCSEncoder#doToUnicode
inline bool ISO885916Encoder::doToUnicode(Char& to, uchar from) const {
	ASCENSION_TABLE_N2U(ISO885916toUCS_A0)
}

#undef ASCENSION_BEGIN_TABLE_U2N
#undef ASCENSION_TABLE_ENTRY_U2N
#undef ASCENSION_END_TABLE_U2N
#undef ASCENSION_TABLE_N2U

#endif /* !ASCENSION_NO_EXTENDED_ENCODINGS */
#endif /* !ASCENSION_NO_STANDARD_ENCODINGS */
