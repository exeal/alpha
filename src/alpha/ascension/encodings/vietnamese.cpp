/**
 * @file vietnamese.cpp
 * @author exeal
 * @date 2004-2007
 *
 * This implementation is based on Vietnamese Enabling Project of Mozilla
 * (http://www.vnet.org/vanlangsj/mozilla/).
 */

#ifndef ASCENSION_NO_EXTENDED_ENCODINGS
#include "../encoder.hpp"
using namespace ascension;
using namespace ascension::encoding;
using namespace std;

// registry
namespace {
	ASCENSION_BEGIN_SBCS_ENCODER_CLASS(VISCIIEncoder, extended::VISCII, "VISCII")
		ASCENSION_ENCODER_ALIASES("csVISCII\0")
	ASCENSION_END_ENCODER_CLASS()
//	ASCENSION_BEGIN_SBCS_ENCODER_CLASS(VIQREncoder, extended::VIQR, "VIQR")
//		ASCENSION_ENCODER_ALIASES("csVIQR\0")
//	ASCENSION_END_ENCODER_CLASS()
	ASCENSION_DEFINE_SBCS_ENCODER(TCVNEncoder, extended::TCVN, "TCVN")
	ASCENSION_DEFINE_SBCS_ENCODER(VPSEncoder, extended::VPS, "VPS")

	struct Installer {
		Installer() {
			Encoder::registerEncoder(auto_ptr<Encoder>(new VISCIIEncoder));
//			Encoder::registerEncoder(auto_ptr<Encoder>(new VIQREncoder));
			Encoder::registerEncoder(auto_ptr<Encoder>(new TCVNEncoder));
			Encoder::registerEncoder(auto_ptr<Encoder>(new VPSEncoder));
		}
	} installer;
} // namespace @0

namespace {
	const uchar N__A = UNMAPPABLE_NATIVE_CHARACTER;
	const Char RP__CH = REPLACEMENT_CHARACTER;
	const Char TCVNtoUCS_00[] = {
	/* 0x00 */	0x0000, 0x00DA, 0x1EE4, 0x0003, 0x1EEA, 0x1EEC, 0x1EEE, 0x0007,
				0x0008, 0x0009, 0x000A, 0x000B, 0x000C, 0x000D, 0x000E, 0x000F,
	/* 0x10 */	0x0010, 0x1EE8, 0x1EF0, 0x1EF2, 0x1EF6, 0x1EF8, 0x00DD, 0x1EF4,
				0x0018, 0x0019, 0x001A, 0x001B, 0x001C, 0x001D, 0x001E, 0x001F
	};
	const Char TCVNtoUCS_80[] = {
	/* 0x80 */	0x00C0, 0x1EA2, 0x00C3, 0x00C1, 0x1EA0, 0x1EB6, 0x1EAC, 0x00C8,
				0x1EBA, 0x1EBC, 0x00C9, 0x1EB8, 0x1EC6, 0x00CC, 0x1EC8, 0x0128,
	/* 0x90 */	0x00CD, 0x1ECA, 0x00D2, 0x1ECE, 0x00D5, 0x00D3, 0x1ECC, 0x1ED8,
				0x1EDC, 0x1EDE, 0x1EE0, 0x1EDA, 0x1EE2, 0x00D9, 0x1EE6, 0x0168,
	/* 0xA0 */	0x00A0, 0x0102, 0x00C2, 0x00CA, 0x00D4, 0x01A0, 0x01AF, 0x0110,
				0x0103, 0x00E2, 0x00EA, 0x00F4, 0x01A1, 0x01B0, 0x0111, 0x1EB0,
	/* 0xB0 */	0x0300, 0x0309, 0x0303, 0x0301, 0x0323, 0x00E0, 0x1EA3, 0x00E3,
				0x00E1, 0x1EA1, 0x1EB2, 0x1EB1, 0x1EB3, 0x1EB5, 0x1EAF, 0x1EB4,
	/* 0xC0 */	0x1EAE, 0x1EA6, 0x1EA8, 0x1EAA, 0x1EA4, 0x1EC0, 0x1EB7, 0x1EA7,
				0x1EA9, 0x1EAB, 0x1EA5, 0x1EAD, 0x00E8, 0x1EC2, 0x1EBB, 0x1EBD,
	/* 0xD0 */	0x00E9, 0x1EB9, 0x1EC1, 0x1EC3, 0x1EC5, 0x1EBF, 0x1EC7, 0x00EC,
				0x1EC9, 0x1EC4, 0x1EBE, 0x1ED2, 0x0129, 0x00ED, 0x1ECB, 0x00F2,
	/* 0xE0 */	0x1ED4, 0x1ECF, 0x00F5, 0x00F3, 0x1ECD, 0x1ED3, 0x1ED5, 0x1ED7,
				0x1ED1, 0x1ED9, 0x1EDD, 0x1EDF, 0x1EE1, 0x1EDB, 0x1EE3, 0x00F9,
	/* 0xF0 */	0x1ED6, 0x1EE7, 0x0169, 0x00FA, 0x1EE5, 0x1EEB, 0x1EED, 0x1EEF,
				0x1EE9, 0x1EF1, 0x1EF3, 0x1EF7, 0x1EF9, 0x00FD, 0x1EF5, 0x1ED0
	};
	const uchar UCStoTCVN_0000[] = {
	/* U+0000 */	N__A, N__A, N__A, 0x03, N__A, N__A, N__A, 0x07,
					0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F,
	/* U+0010 */	0x10, N__A, N__A, N__A, N__A, N__A, N__A, N__A,
					0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F
	};
	const uchar UCStoTCVN_00C0[] = {
	/* U+00C0 */	0x80, 0x83, 0xA2, 0x82, N__A, N__A, N__A, N__A,
					0x87, 0x8A, 0xA3, N__A, 0x8D, 0x90, N__A, N__A,
	/* U+00D0 */	N__A, N__A, 0x92, 0x95, 0xA4, 0x94, N__A, N__A,
					N__A, 0x9D, 0x01, N__A, N__A, 0x16, N__A, N__A,
	/* U+00E0 */	0xB5, 0xB8, 0xA9, 0xB7, N__A, N__A, N__A, N__A,
					0xCC, 0xD0, 0xAA, N__A, 0xD7, 0xDD, N__A, N__A,
	/* U+00F0 */	N__A, N__A, 0xDF, 0xE3, 0xAB, 0xE2, N__A, N__A,
					N__A, 0xEF, 0xF3, N__A, N__A, 0xFD, N__A, N__A,
	/* U+0100 */	N__A, N__A, 0xA1, 0xA8, N__A, N__A, N__A, N__A,
					N__A, N__A, N__A, N__A, N__A, N__A, N__A, N__A,
	/* U+0110 */	0xA7, 0xAE, N__A, N__A, N__A, N__A, N__A, N__A,
					N__A, N__A, N__A, N__A, N__A, N__A, N__A, N__A,
	/* U+0120 */	N__A, N__A, N__A, N__A, N__A, N__A, N__A, N__A,
					0x8F, 0xDC
	};
	const uchar UCStoTCVN_0168[] = {
	/* U+0168 */	0x9F, 0xF2
	};
	const uchar UCStoTCVN_01A0[] = {
	/* U+01A0 */	0xA5, 0xAC, N__A, N__A, N__A, N__A, N__A, N__A,
					N__A, N__A, N__A, N__A, N__A, N__A, N__A, 0xA6,
	/* U+01B0 */	0xAD
	};
	const uchar UCStoTCVN_0300[] = {
	/* U+0300 */	0xB0, 0xB3, N__A, 0xB2, N__A, N__A, N__A, N__A,
					N__A, 0xB1, N__A, N__A, N__A, N__A, N__A, N__A,
	/* U+0310 */	N__A, N__A, N__A, N__A, N__A, N__A, N__A, N__A,
					N__A, N__A, N__A, N__A, N__A, N__A, N__A, N__A,
	/* U+0320 */	N__A, N__A, N__A, 0xB4
	};
	const uchar UCStoTCVN_1EA0[] = {
	/* U+1EA0 */	0x84, 0xB9, 0x81, 0xB6, 0xC4, 0xCA, 0xC1, 0xC7,
					0xC2, 0xC8, 0xC3, 0xC9, 0x86, 0xCB, 0xC0, 0xBE,
	/* U+1EB0 */	0xAF, 0xBB, 0xBA, 0xBC, 0xBF, 0xBD, 0x85, 0xC6,
					0x8B, 0xD1, 0x88, 0xCE, 0x89, 0xCF, 0xDA, 0xD5,
	/* U+1EC0 */	0xC5, 0xD2, 0xCD, 0xD3, 0xD9, 0xD4, 0x8C, 0xD6,
					0x8E, 0xD8, 0x91, 0xDE, 0x96, 0xE4, 0x93, 0xE1,
	/* U+1ED0 */	0xFF, 0xE8, 0xDB, 0xE5, 0xE0, 0xE6, 0xF0, 0xE7,
					0x97, 0xE9, 0x9B, 0xED, 0x98, 0xEA, 0x99, 0xEB,
	/* U+1EE0 */	0x9A, 0xEC, 0x9C, 0xEE, 0x02, 0xF4, 0x9E, 0xF1,
					0x11, 0xF8, 0x04, 0xF5, 0x05, 0xF6, 0x06, 0xF7,
	/* U+1EF0 */	0x12, 0xF9, 0x13, 0xFA, 0x17, 0xFE, 0x14, 0xFB,
					0x15, 0xFC
	};
	const Char VISCIItoUCS_00[] = {
	/* 0x00 */	0x0000, 0x0001, 0x1EB2, 0x0003, 0x0004, 0x1EB4, 0x1EAA, 0x0007,
				0x0008, 0x0009, 0x000A, 0x000B, 0x000C, 0x000D, 0x000E, 0x000F,
	/* 0x10 */	0x0010, 0x0011, 0x0012, 0x0013, 0x1EF6, 0x0015, 0x0016, 0x0017,
				0x0018, 0x1EF8, 0x001A, 0x001B, 0x001C, 0x001D, 0x1EF4, 0x001F
	};
	const Char VISCIItoUCS_80[] = {
	/* 0x80 */	0x1EA0, 0x1EAE, 0x1EB0, 0x1EB6, 0x1EA4, 0x1EA6, 0x1EA8, 0x1EAC,
				0x1EBC, 0x1EB8, 0x1EBE, 0x1EC0, 0x1EC2, 0x1EC4, 0x1EC6, 0x1ED0,
	/* 0x90 */	0x1ED2, 0x1ED4, 0x1ED6, 0x1ED8, 0x1EE2, 0x1EDA, 0x1EDC, 0x1EDE,
				0x1ECA, 0x1ECE, 0x1ECC, 0x1EC8, 0x1EE6, 0x0168, 0x1EE4, 0x1EF2,
	/* 0xA0 */	0x00D5, 0x1EAF, 0x1EB1, 0x1EB7, 0x1EA5, 0x1EA7, 0x1EA9, 0x1EAD,
				0x1EBD, 0x1EB9, 0x1EBF, 0x1EC1, 0x1EC3, 0x1EC5, 0x1EC7, 0x1ED1,
	/* 0xB0 */	0x1ED3, 0x1ED5, 0x1ED7, 0x1EE0, 0x01A0, 0x1ED9, 0x1EDD, 0x1EDF,
				0x1ECB, 0x1EF0, 0x1EE8, 0x1EEA, 0x1EEC, 0x01A1, 0x1EDB, 0x01AF,
	/* 0xC0 */	0x00C0, 0x00C1, 0x00C2, 0x00C3, 0x1EA2, 0x0102, 0x1EB3, 0x1EB5,
				0x00C8, 0x00C9, 0x00CA, 0x1EBA, 0x00CC, 0x00CD, 0x0128, 0x1EF3,
	/* 0xD0 */	0x0110, 0x1EE9, 0x00D2, 0x00D3, 0x00D4, 0x1EA1, 0x1EF7, 0x1EEB,
				0x1EED, 0x00D9, 0x00DA, 0x1EF9, 0x1EF5, 0x00DD, 0x1EE1, 0x01B0,
	/* 0xE0 */	0x00E0, 0x00E1, 0x00E2, 0x00E3, 0x1EA3, 0x0103, 0x1EEF, 0x1EAB,
				0x00E8, 0x00E9, 0x00EA, 0x1EBB, 0x00EC, 0x00ED, 0x0129, 0x1EC9,
	/* 0xF0 */	0x0111, 0x1EF1, 0x00F2, 0x00F3, 0x00F4, 0x00F5, 0x1ECF, 0x1ECD,
				0x1EE5, 0x00F9, 0x00FA, 0x0169, 0x1EE7, 0x00FD, 0x1EE3, 0x1EEE
	};
	const uchar UCStoVISCII_0000[] = {
	/* U+0000 */	0x00, 0x01, N__A, 0x03, 0x04, N__A, N__A, 0x07,
					0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F,
	/* U+0010 */	0x10, 0x11, 0x12, 0x13, N__A, 0x15, 0x16, 0x17,
					0x18, N__A, 0x1A, 0x1B, 0x1C, 0x1D, N__A, 0x1F
	};
	const uchar UCStoVISCII_00C0[] = {
	/* U+00C0 */	0xC0, 0xC1, 0xC2, 0xC3, N__A, N__A, N__A, N__A,
					0xC8, 0xC9, 0xCA, N__A, 0xCC, 0xCD, N__A, N__A,
	/* U+00D0 */	N__A, N__A, 0xD2, 0xD3, 0xD4, 0xA0, N__A, N__A,
					N__A, 0xD9, 0xDA, N__A, N__A, 0xDD, N__A, N__A,
	/* U+00E0 */	0xE0, 0xE1, 0xE2, 0xE3, N__A, N__A, N__A, N__A,
					0xE8, 0xE9, 0xEA, N__A, 0xEC, 0xED, N__A, N__A,
	/* U+00F0 */	N__A, N__A, 0xF2, 0xF3, 0xF4, 0xF5, N__A, N__A,
					N__A, 0xF9, 0xFA, N__A, N__A, 0xFD, N__A, N__A,
	/* U+0100 */	N__A, N__A, 0xC5, 0xE5, N__A, N__A, N__A, N__A,
					N__A, N__A, N__A, N__A, N__A, N__A, N__A, N__A,
	/* U+0110 */	0xD0, 0xF0, N__A, N__A, N__A, N__A, N__A, N__A,
					N__A, N__A, N__A, N__A, N__A, N__A, N__A, N__A,
	/* U+0120 */	N__A, N__A, N__A, N__A, N__A, N__A, N__A, N__A,
					0xCE, 0xEE
	};
	const uchar UCStoVISCII_0168[] = {
	/* U+0168 */	0x9D, 0xFB
	};
	const uchar UCStoVISCII_01A0[] = {
	/* U+01A0 */	0xB4, 0xBD, N__A, N__A, N__A, N__A, N__A, N__A,
					N__A, N__A, N__A, N__A, N__A, N__A, N__A, 0xBF,
	/* U+01B0 */	0xDF
	};
	const uchar UCStoVISCII_1EA0[] = {
	/* U+1EA0 */	0x80, 0xD5, 0xC4, 0xE4, 0x84, 0xA4, 0x85, 0xA5,
					0x86, 0xA6, 0x06, 0xE7, 0x87, 0xA7, 0x81, 0xA1,
	/* U+1EB0 */	0x82, 0xA2, 0x02, 0xC6, 0x05, 0xC7, 0x83, 0xA3,
					0x89, 0xA9, 0xCB, 0xEB, 0x88, 0xA8, 0x8A, 0xAA,
	/* U+1EC0 */	0x8B, 0xAB, 0x8C, 0xAC, 0x8D, 0xAD, 0x8E, 0xAE,
					0x9B, 0xEF, 0x98, 0xB8, 0x9A, 0xF7, 0x99, 0xF6,
	/* U+1ED0 */	0x8F, 0xAF, 0x90, 0xB0, 0x91, 0xB1, 0x92, 0xB2,
					0x93, 0xB5, 0x95, 0xBE, 0x96, 0xB6, 0x97, 0xB7,
	/* U+1EE0 */	0xB3, 0xDE, 0x94, 0xFE, 0x9E, 0xF8, 0x9C, 0xFC,
					0xBA, 0xD1, 0xBB, 0xD7, 0xBC, 0xD8, 0xFF, 0xE6,
	/* U+1EF0 */	0xB9, 0xF1, 0x9F, 0xCF, 0x1E, 0xDC, 0x14, 0xD6,
					0x19, 0xDB
	};
	const Char VPStoUCS_00[] = {
	/* 0x00 */	0x0000, 0x0001, 0x1EA0, 0x1EAC, 0x1EB6, 0x1EB8, 0x1EC6, 0x0007,
				0x0008, 0x0009, 0x000A, 0x000B, 0x000C, 0x000D, 0x000E, 0x000F,
	/* 0x10 */	0x1ECA, 0x1ECC, 0x1ED8, 0x1EE2, 0x1EE4, 0x1EF0, 0x0016, 0x0017,
				0x0018, 0x1EF4, 0x001A, 0x001B, 0x1EAA, 0x1EEE, 0x001E, 0x001F,
	/* 0x20 */	0x0020, 0x0021, 0x0022, 0x0023, 0x0024, 0x0025, 0x0026, 0x0027,
				0x0028, 0x0029, 0x002A, 0x002B, 0x002C, 0x002D, 0x002E, 0x002F,
	/* 0x30 */	0x0030, 0x0031, 0x0032, 0x0033, 0x0034, 0x0035, 0x0036, 0x0037,
				0x0038, 0x0039, 0x003A, 0x003B, 0x003C, 0x003D, 0x003E, 0x003F,
	/* 0x40 */	0x0040, 0x0041, 0x0042, 0x0043, 0x0044, 0x0045, 0x0046, 0x0047,
				0x0048, 0x0049, 0x004A, 0x004B, 0x004C, 0x004D, 0x004E, 0x004F,
	/* 0x50 */	0x0050, 0x0051, 0x0052, 0x0053, 0x0054, 0x0055, 0x0056, 0x0057,
				0x0058, 0x0059, 0x005A, 0x005B, 0x005C, 0x005D, 0x005E, 0x005F,
	/* 0x60 */	0x0060, 0x0061, 0x0062, 0x0063, 0x0064, 0x0065, 0x0066, 0x0067,
				0x0068, 0x0069, 0x006A, 0x006B, 0x006C, 0x006D, 0x006E, 0x006F,
	/* 0x70 */	0x0070, 0x0071, 0x0072, 0x0073, 0x0074, 0x0075, 0x0076, 0x0077,
				0x0078, 0x0079, 0x007A, 0x007B, 0x007C, 0x007D, 0x007E, 0x007F,
	/* 0x80 */	0x00C0, 0x1EA2, 0x00C3, 0x1EA4, 0x1EA6, 0x1EA8, 0x1ECD, 0x1ED7,
				0x0102, 0x1EBF, 0x1EC1, 0x1EC3, 0x1EC7, 0x1EAE, 0x1EB0, 0x1EB2,
	/* 0x90 */	0x1EBE, 0x2018, 0x2019, 0x1EC0, 0x1EC2, 0x1EC4, 0x1ED0, 0x1ED2,
				0x1ED4, 0x1ED6, 0x00FD, 0x1EF7, 0x1EF5, 0x1EDA, 0x1EDC, 0x1EDE,
	/* 0xA0 */	0x00A0, 0x1EAF, 0x1EB1, 0x1EB3, 0x1EB5, 0x1EB7, 0x1EE0, 0x1EDB,
				0x00D9, 0x1EDD, 0x1EDF, 0x1EE1, 0x0168, 0x1EE8, 0x1EE3, 0x1EEA,
	/* 0xB0 */	0x1ED5, 0x1EEC, 0x1EF2, 0x1EF8, 0x00CD, 0x00CC, 0x1ED9, 0x1EC8,
				0x0128, 0x00D3, 0x1EED, 0x1EEF, 0x00D2, 0x1ECE, 0x00D5, 0x1EF1,
	/* 0xC0 */	0x1EA7, 0x00C1, 0x00C2, 0x1EA5, 0x1EA9, 0x1EAB, 0x1EAD, 0x0111,
				0x1EBB, 0x00C9, 0x00CA, 0x1EB9, 0x1EC9, 0x1EC5, 0x1ECB, 0x1EF9,
	/* 0xD0 */	0x01AF, 0x1EE6, 0x1ED3, 0x1ED1, 0x00D4, 0x1ECF, 0x01A1, 0x00C8,
				0x1EEB, 0x1EE9, 0x00DA, 0x0169, 0x01B0, 0x00DD, 0x1EBA, 0x00DF,
	/* 0xE0 */	0x00E0, 0x00E1, 0x00E2, 0x00E3, 0x1EA3, 0x1EA1, 0x0103, 0x00E7,
				0x00E8, 0x00E9, 0x00EA, 0x1EBD, 0x00EC, 0x00ED, 0x00EE, 0x0129,
	/* 0xF0 */	0x1EB4, 0x0110, 0x00F2, 0x00F3, 0x00F4, 0x00F5, 0x00F6, 0x01A0,
				0x1EE5, 0x00F9, 0x00FA, 0x1EE7, 0x00FC, 0x1EF6, 0x1EBC, 0x1EF3
	};
	const uchar UCStoVPS_0000[] = {
	/* U+0000 */	0x00, 0x01, N__A, N__A, N__A, N__A, N__A, 0x07,
					N__A, N__A, N__A, N__A, N__A, N__A, N__A, N__A,
	/* U+0010 */	N__A, N__A, N__A, N__A, N__A, N__A, 0x16, 0x17
	};
	const uchar UCStoVPS_00A0[] = {
	/* U+00A0 */	0xA0, N__A, N__A, N__A, N__A, N__A, N__A, N__A,
					N__A, N__A, N__A, N__A, N__A, N__A, N__A, N__A,
	/* U+00B0 */	N__A, N__A, N__A, N__A, N__A, N__A, N__A, N__A,
					N__A, N__A, N__A, N__A, N__A, N__A, N__A, N__A,
	/* U+00C0 */	0x80, 0xC1, 0xC2, 0x82, N__A, N__A, N__A, N__A,
					0xD7, 0xC9, 0xCA, N__A, 0xB5, 0xB4, N__A, N__A,
	/* U+00D0 */	N__A, N__A, 0xBC, 0xB9, 0xD4, 0xBE, N__A, N__A,
					N__A, 0xA8, 0xDA, N__A, N__A, 0xDD, N__A, 0xDF,
	/* U+00E0 */	0xE0, 0xE1, 0xE2, 0xE3, N__A, N__A, N__A, 0xE7,
					0xE8, 0xE9, 0xEA, N__A, 0xEC, 0xED, 0xEE, N__A,
	/* U+00F0 */	N__A, N__A, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, N__A,
					N__A, 0xF9, 0xFA, N__A, 0xFC, 0x9A, N__A, N__A,
	/* U+0100 */	N__A, N__A, 0x88, 0xE6, N__A, N__A, N__A, N__A,
					N__A, N__A, N__A, N__A, N__A, N__A, N__A, N__A,
	/* U+0110 */	0xF1, 0xC7, N__A, N__A, N__A, N__A, N__A, N__A,
					N__A, N__A, N__A, N__A, N__A, N__A, N__A, N__A,
	/* U+0120 */	N__A, N__A, N__A, N__A, N__A, N__A, N__A, N__A,
					0xB8, 0xEF
	};
	const uchar UCStoVPS_0168[] = {
					0xAC, 0xDB
	};
	const uchar UCStoVPS_01A0[] = {
	/* U+01A0 */	0xF7, 0xD6, N__A, N__A, N__A, N__A, N__A, N__A,
					N__A, N__A, N__A, N__A, N__A, N__A, N__A, 0xD0,
	/* U+01B0 */	0xDC
	};
	const uchar UCStoVPS_1EA0[] = {
	/* U+1EA0 */	0x02, 0xE5, 0x81, 0xE4, 0x83, 0xC3, 0x84, 0xC0,
					0x85, 0xC4, 0x1C, 0xC5, 0x03, 0xC6, 0x8D, 0xA1,
	/* U+1EB0 */	0x8E, 0xA2, 0x8F, 0xA3, 0xF0, 0xA4, 0x04, 0xA5,
					0x05, 0xCB, 0xDE, 0xC8, 0xFE, 0xEB, 0x90, 0x89,
	/* U+1EC0 */	0x93, 0x8A, 0x94, 0x8B, 0x95, 0xCD, 0x06, 0x8C,
					0xB7, 0xCC, 0x10, 0xCE, 0x11, 0x86, 0xBD, 0xD5,
	/* U+1ED0 */	0x96, 0xD3, 0x97, 0xD2, 0x98, 0xB0, 0x99, 0x87,
					0x12, 0xB6, 0x9D, 0xA7, 0x9E, 0xA9, 0x9F, 0xAA,
	/* U+1EE0 */	0xA6, 0xAB, 0x13, 0xAE, 0x14, 0xF8, 0xD1, 0xFB,
					0xAD, 0xD9, 0xAF, 0xD8, 0xB1, 0xBA, 0x1D, 0xBB,
	/* U+1EF0 */	0x15, 0xBF, 0xB2, 0xFF, 0x19, 0x9C, 0xFD, 0x9B,
					0xB3, 0xCF
	};
	const uchar UCStoVPS_2018[] = {
					0x91, 0x92
	};
} // namespace `anonymous'


// TCVNEncoder //////////////////////////////////////////////////////////////

/// @see SBCSEncoder#doFromUnicode
inline bool TCVNEncoder::doFromUnicode(uchar& to, Char from) const {
	if(from < countof(UCStoTCVN_0000))
		to = UCStoTCVN_0000[from];
	else if(from < 0x0080)
		to = mask8Bit(from);
	else if(from >= 0x00C0 && from < 0x00C0 + countof(UCStoTCVN_00C0))
		to = UCStoTCVN_00C0[from - 0x00C0];
	else if(from >= 0x0168 && from < 0x0168 + countof(UCStoTCVN_0168))
		to = UCStoTCVN_0168[from - 0x0168];
	else if(from >= 0x01A0 && from < 0x01A0 + countof(UCStoTCVN_01A0))
		to = UCStoTCVN_01A0[from - 0x01A0];
	else if(from >= 0x0300 && from < 0x0300 + countof(UCStoTCVN_0300))
		to = UCStoTCVN_0300[from - 0x0300];
	else if(from >= 0x1EA0 && from < 0x1EA0 + countof(UCStoTCVN_1EA0))
		to = UCStoTCVN_1EA0[from - 0x1EA0];
	else
		return false;
	return to != REPLACEMENT_CHARACTER;
}

/// @see SBCSEncoder#doToUnicode
inline bool TCVNEncoder::doToUnicode(Char& to, uchar from) const {
	if(from < countof(TCVNtoUCS_00))
		to = TCVNtoUCS_00[from];
	else if(from < 0x80)
		to = from;
	else
		to = TCVNtoUCS_80[from - 0x80];
	return to != REPLACEMENT_CHARACTER;
}


// VISCIIEncoder ////////////////////////////////////////////////////////////

/// @see SBCSEncoder#doFromUnicode
inline bool VISCIIEncoder::doFromUnicode(uchar& to, Char from) const {
	if(from < countof(UCStoVISCII_0000))
		to = UCStoVISCII_0000[from];
	else if(from < 0x0080)
		to = mask8Bit(from);
	else if(from >= 0x00C0 && from < 0x00C0 + countof(UCStoVISCII_00C0))
		to = UCStoVISCII_00C0[from - 0x00C0];
	else if(from >= 0x0168 && from < 0x0168 + countof(UCStoVISCII_0168))
		to = UCStoVISCII_0168[from - 0x0168];
	else if(from >= 0x01A0 && from < 0x01A0 + countof(UCStoVISCII_01A0))
		to = UCStoVISCII_01A0[from - 0x01A0];
	else if(from >= 0x1EA0 && from < 0x1EA0 + countof(UCStoVISCII_1EA0))
		to = UCStoVISCII_1EA0[from - 0x1EA0];
	else
		return false;
	return true;
}

/// @see SBCSEncoder#doToUnicode
inline bool VISCIIEncoder::doToUnicode(Char& to, uchar from) const {
	if(from < countof(VISCIItoUCS_00))
		to = VISCIItoUCS_00[from];
	else if(from < 0x80)
		to = from;
	else
		to = VISCIItoUCS_80[from - 0x80];
	return to != REPLACEMENT_CHARACTER;
}


// VPSEncoder ///////////////////////////////////////////////////////////////

/// @see SBCSEncoder#doFromUnicode
inline bool VPSEncoder::doFromUnicode(uchar& to, Char from) const {
	if(from < countof(UCStoVPS_0000))
		to = UCStoVPS_0000[from];
	else if(from >= 0x00A0 && from < 0x00A0 + countof(UCStoVPS_00A0))
		to = UCStoVPS_00A0[from - 0x00A0];
	else if(from >= 0x0168 && from < 0x0168 + countof(UCStoVPS_0168))
		to = UCStoVPS_0168[from - 0x0168];
	else if(from >= 0x01A0 && from < 0x01A0 + countof(UCStoVPS_01A0))
		to = UCStoVPS_01A0[from - 0x01A0];
	else if(from >= 0x1EA0 && from < 0x1EA0 + countof(UCStoVPS_1EA0))
		to = UCStoVPS_1EA0[from - 0x1EA0];
	else if(from >= 0x2018 && from < 0x2018 + countof(UCStoVPS_2018))
		to = UCStoVPS_2018[from - 0x2018];
	else
		return false;
	return to != 0 || from != to;
}

/// @see SBCSEncoder#doToUnicode
inline bool VPSEncoder::doToUnicode(Char& to, uchar from) const {
	to = VPStoUCS_00[from];
	return true;
}

#endif /* !ASCENSION_NO_EXTENDED_ENCODINGS */
