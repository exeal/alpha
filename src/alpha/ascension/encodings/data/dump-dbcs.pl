#!/usr/local/bin/perl

# dump-dbcs.pl (c) 2008 exeal
# Generates C++ code for a mapping table from the given XML file of ICU repositry.

use strict;
use warnings;
use integer;
use XML::Parser;

use constant NATIVE_REPLACEMENT_BYTES => '0x0000';
use constant UNICODE_REPLACEMENT_CHARACTER => '0xFFFD';

die 'usage: perl dump-dbcs.pl (-u2n|-n2u) <input-file-name>' if($#ARGV != 1 or not $ARGV[0] =~ m/^-(?:u2n|n2u)$/i);
my $u2n_mapping = $ARGV[0] eq '-u2n';
my $input_filename = $ARGV[1];

my @table;
# my $substitution;

sub sax_handler {
	my($p, $element, %attributes) = @_;
	if($element eq 'a') {
		my $dbcs;
		if($attributes{'b'} =~ m/^([0-9A-Fa-f]{1,2})\s([0-9A-Fa-f]{1,2})$/) {
			$dbcs = (hex($1) << 8) | hex($2);
        } elsif($attributes{'b'} =~ m/^([0-9A-Fa-f]{1,2})$/) {
			$dbcs = hex $1;
        } else {
			die "unknown byte sequence $p";
		}
		if($u2n_mapping) {
			$table[hex $attributes{'u'}] = $dbcs;
		} else {
			$table[$dbcs] = hex $attributes{'u'};
		}
#	} elsif($element eq 'assignments') {
#		$substitution = '0x' . $attributes{'sub'};
	}
}

my $xml = new XML::Parser(Handlers => {Start => \&sax_handler});
$xml->parsefile($input_filename);

# verify 7-bit ASCII compatibility
for(my $c = 0; $c < 0x80; ++$c) {
	die 'Error: This encoding is not compatible with US-ASCII.' if(defined $table[$c] and $table[$c] != $c);
}

# dump mapping table
print '// automatically generated by `dump-dbcs.pl '
	. $ARGV[0] . ' "' . $input_filename . '"` at ' . localtime(time) . "\n";
for(my $high = 0x00; $high < 0x100; ++$high) {
	my $empty_wire = 1;
	for(my $low = 0x00; $low < 0x100; ++$low) {
		if(defined $table[$low | ($high << 8)]) {
			$empty_wire = 0;
			last;
		}
	}
	if($empty_wire) {
		print '0';
	} else {
		print $u2n_mapping ? "CharWire<\n" : "DBCSWire<\n";
		for(my $low = 0x00; $low < 0x100; ++$low) {
			print($u2n_mapping ? "\tCharLine<" : "\tDBCSLine<") if($low % 16 == 0);
			my $ucs = $low | ($high << 8);
			if(defined $table[$ucs]) {
				printf '0x%04X', $table[$ucs];
			} else {
				print $u2n_mapping ? NATIVE_REPLACEMENT_BYTES : UNICODE_REPLACEMENT_CHARACTER;
	        }
	        if($low % 16 != 15) {
	        	print ',';
	        } elsif($low != 0xFF) {
	        	print ">,\n";
	        } else {
	        	print ">\n";
	        }
		}
		print ">::VALUES"
	}
	print ',' if($high != 0xFF);
	print "\n";
}

__END__
