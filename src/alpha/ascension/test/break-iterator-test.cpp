// automatically generated by `perl gen-uax29-test.pl` at $ Mon Feb 26 11:46:28 2007 $

// break-iterator-test.cpp
#include "stdafx.h"
#include "../unicode.hpp"

namespace {
	template<template<class> class Iterator>
	void check(Iterator<ascension::unicode::StringCharacterIterator>& i, const std::vector<std::size_t>& indices) {
		const ascension::Char* const p = i.base().tell();
		// forward iteration
		for(std::vector<std::size_t>::const_iterator j = indices.begin(); j != indices.end(); ++j)
			BOOST_CHECK_EQUAL((i++).base().tell(), p + *j);
		// backward iteration
		BOOST_REQUIRE(i.base().isLast());
		for(std::vector<std::size_t>::const_reverse_iterator j = indices.rbegin(); j != indices.rend(); ++j)
			BOOST_CHECK_EQUAL((i--).base().tell(), p + *j);
		// random check
		BOOST_REQUIRE(i.base().isFirst());
		for(std::vector<std::size_t>::const_iterator j = indices.begin(); j != indices.end(); ++j)
			BOOST_CHECK(i.isBoundary(ascension::unicode::StringCharacterIterator(p, i.base().getLast(), p + *j)));
	}

	inline void checkGBI(const ascension::String& s, const std::vector<std::size_t>& indices) {
		ascension::unicode::StringCharacterIterator text(s);
		return check<ascension::unicode::GraphemeBreakIterator>(
			ascension::unicode::GraphemeBreakIterator<ascension::unicode::StringCharacterIterator>(text), indices);
	}

	inline void checkWBI(const ascension::String& s, const std::vector<std::size_t>& indices) {
		ascension::unicode::StringCharacterIterator text(s);
		return check<ascension::unicode::WordBreakIterator>(
			ascension::unicode::WordBreakIterator<ascension::unicode::StringCharacterIterator>(
				text, ascension::unicode::AbstractWordBreakIterator::BOUNDARY_OF_SEGMENT, ascension::unicode::IdentifierSyntax()), indices);
	}

	inline void checkSBI(const ascension::String& s, const std::vector<std::size_t>& indices) {
	}
}

void testGraphemeBreakIterator() {
	std::vector<std::size_t> indices;
	initializeContainer(indices) = 0, 1, 2;
	checkGBI(L"\x0020\x0020", indices);
	checkGBI(L"\x0020\x000D", indices);
	checkGBI(L"\x0020\x000A", indices);
	checkGBI(L"\x0020\x0001", indices);
	initializeContainer(indices) = 0, 1;
	checkGBI(L"\x0020", indices);
	initializeContainer(indices) = 0, 1, 2;
	checkGBI(L"\x0020\x1100", indices);
	checkGBI(L"\x0020\x1160", indices);
	checkGBI(L"\x0020\x11A8", indices);
	checkGBI(L"\x0020\xAC00", indices);
	checkGBI(L"\x0020\xAC01", indices);
	checkGBI(L"\x000D\x0020", indices);
	checkGBI(L"\x000D\x000D", indices);
	initializeContainer(indices) = 0, 1;
	checkGBI(L"\x000D", indices);
	initializeContainer(indices) = 0, 1, 2;
	checkGBI(L"\x000D\x0001", indices);
	checkGBI(L"\x000D\x0300", indices);
	checkGBI(L"\x000D\x1100", indices);
	checkGBI(L"\x000D\x1160", indices);
	checkGBI(L"\x000D\x11A8", indices);
	checkGBI(L"\x000D\xAC00", indices);
	checkGBI(L"\x000D\xAC01", indices);
	checkGBI(L"\x000A\x0020", indices);
	checkGBI(L"\x000A\x000D", indices);
	checkGBI(L"\x000A\x000A", indices);
	checkGBI(L"\x000A\x0001", indices);
	checkGBI(L"\x000A\x0300", indices);
	checkGBI(L"\x000A\x1100", indices);
	checkGBI(L"\x000A\x1160", indices);
	checkGBI(L"\x000A\x11A8", indices);
	checkGBI(L"\x000A\xAC00", indices);
	checkGBI(L"\x000A\xAC01", indices);
	checkGBI(L"\x0001\x0020", indices);
	checkGBI(L"\x0001\x000D", indices);
	checkGBI(L"\x0001\x000A", indices);
	checkGBI(L"\x0001\x0001", indices);
	checkGBI(L"\x0001\x0300", indices);
	checkGBI(L"\x0001\x1100", indices);
	checkGBI(L"\x0001\x1160", indices);
	checkGBI(L"\x0001\x11A8", indices);
	checkGBI(L"\x0001\xAC00", indices);
	checkGBI(L"\x0001\xAC01", indices);
	checkGBI(L"\x0300\x0020", indices);
	checkGBI(L"\x0300\x000D", indices);
	checkGBI(L"\x0300\x000A", indices);
	checkGBI(L"\x0300\x0001", indices);
	initializeContainer(indices) = 0, 1;
	checkGBI(L"\x0300", indices);
	initializeContainer(indices) = 0, 1, 2;
	checkGBI(L"\x0300\x1100", indices);
	checkGBI(L"\x0300\x1160", indices);
	checkGBI(L"\x0300\x11A8", indices);
	checkGBI(L"\x0300\xAC00", indices);
	checkGBI(L"\x0300\xAC01", indices);
	checkGBI(L"\x1100\x0020", indices);
	checkGBI(L"\x1100\x000D", indices);
	checkGBI(L"\x1100\x000A", indices);
	checkGBI(L"\x1100\x0001", indices);
	initializeContainer(indices) = 0, 1;
	checkGBI(L"\x1100", indices);
	checkGBI(L"\x1100", indices);
	checkGBI(L"\x1100", indices);
	initializeContainer(indices) = 0, 1, 2;
	checkGBI(L"\x1100\x11A8", indices);
	initializeContainer(indices) = 0, 1;
	checkGBI(L"\x1100", indices);
	checkGBI(L"\x1100", indices);
	initializeContainer(indices) = 0, 1, 2;
	checkGBI(L"\x1160\x0020", indices);
	checkGBI(L"\x1160\x000D", indices);
	checkGBI(L"\x1160\x000A", indices);
	checkGBI(L"\x1160\x0001", indices);
	initializeContainer(indices) = 0, 1;
	checkGBI(L"\x1160", indices);
	initializeContainer(indices) = 0, 1, 2;
	checkGBI(L"\x1160\x1100", indices);
	initializeContainer(indices) = 0, 1;
	checkGBI(L"\x1160", indices);
	checkGBI(L"\x1160", indices);
	initializeContainer(indices) = 0, 1, 2;
	checkGBI(L"\x1160\xAC00", indices);
	checkGBI(L"\x1160\xAC01", indices);
	checkGBI(L"\x11A8\x0020", indices);
	checkGBI(L"\x11A8\x000D", indices);
	checkGBI(L"\x11A8\x000A", indices);
	checkGBI(L"\x11A8\x0001", indices);
	initializeContainer(indices) = 0, 1;
	checkGBI(L"\x11A8", indices);
	initializeContainer(indices) = 0, 1, 2;
	checkGBI(L"\x11A8\x1100", indices);
	checkGBI(L"\x11A8\x1160", indices);
	initializeContainer(indices) = 0, 1;
	checkGBI(L"\x11A8", indices);
	initializeContainer(indices) = 0, 1, 2;
	checkGBI(L"\x11A8\xAC00", indices);
	checkGBI(L"\x11A8\xAC01", indices);
	checkGBI(L"\xAC00\x0020", indices);
	checkGBI(L"\xAC00\x000D", indices);
	checkGBI(L"\xAC00\x000A", indices);
	checkGBI(L"\xAC00\x0001", indices);
	initializeContainer(indices) = 0, 1;
	checkGBI(L"\xAC00", indices);
	initializeContainer(indices) = 0, 1, 2;
	checkGBI(L"\xAC00\x1100", indices);
	initializeContainer(indices) = 0, 1;
	checkGBI(L"\xAC00", indices);
	checkGBI(L"\xAC00", indices);
	initializeContainer(indices) = 0, 1, 2;
	checkGBI(L"\xAC00\xAC00", indices);
	checkGBI(L"\xAC00\xAC01", indices);
	checkGBI(L"\xAC01\x0020", indices);
	checkGBI(L"\xAC01\x000D", indices);
	checkGBI(L"\xAC01\x000A", indices);
	checkGBI(L"\xAC01\x0001", indices);
	initializeContainer(indices) = 0, 1;
	checkGBI(L"\xAC01", indices);
	initializeContainer(indices) = 0, 1, 2;
	checkGBI(L"\xAC01\x1100", indices);
	checkGBI(L"\xAC01\x1160", indices);
	initializeContainer(indices) = 0, 1;
	checkGBI(L"\xAC01", indices);
	initializeContainer(indices) = 0, 1, 2;
	checkGBI(L"\xAC01\xAC00", indices);
	checkGBI(L"\xAC01\xAC01", indices);
}

void testWordBreakIterator() {
	std::vector<std::size_t> indices;
	initializeContainer(indices) = 0, 1, 2;
	checkWBI(L"\x0020\x0020", indices);
	checkWBI(L"\x0020\x0001", indices);
	initializeContainer(indices) = 0, 1;
	checkWBI(L"\x0020", indices);
	initializeContainer(indices) = 0, 1, 2;
	checkWBI(L"\x0020\x000A", indices);
	checkWBI(L"\x0020\x000D", indices);
	checkWBI(L"\x0020\x0085", indices);
	initializeContainer(indices) = 0, 1;
	checkWBI(L"\x0020", indices);
	initializeContainer(indices) = 0, 1, 2;
	checkWBI(L"\x0020\x3031", indices);
	checkWBI(L"\x0020\x0041", indices);
	checkWBI(L"\x0020\x0027", indices);
	checkWBI(L"\x0020\x002C", indices);
	checkWBI(L"\x0020\x0030", indices);
	checkWBI(L"\x0020\x005F", indices);
	checkWBI(L"\x0020\x0061", indices);
	initializeContainer(indices) = 0, 1, 2, 3;
	checkWBI(L"\x0020\x0061\x003A", indices);
	checkWBI(L"\x0020\x0061\x0027", indices);
	checkWBI(L"\x0020\x0061\x0027", indices);
	checkWBI(L"\x0020\x0061\x002C", indices);
	checkWBI(L"\x0020\x0031\x003A", indices);
	checkWBI(L"\x0020\x0031\x0027", indices);
	checkWBI(L"\x0020\x0031\x002C", indices);
	checkWBI(L"\x0020\x0031\x002E", indices);
	initializeContainer(indices) = 0, 1, 2;
	checkWBI(L"\x0001\x0020", indices);
	checkWBI(L"\x0001\x0001", indices);
	initializeContainer(indices) = 0, 1;
	checkWBI(L"\x0001", indices);
	initializeContainer(indices) = 0, 1, 2;
	checkWBI(L"\x0001\x000A", indices);
	checkWBI(L"\x0001\x000D", indices);
	checkWBI(L"\x0001\x0085", indices);
	initializeContainer(indices) = 0, 1;
	checkWBI(L"\x0001", indices);
	initializeContainer(indices) = 0, 1, 2;
	checkWBI(L"\x0001\x3031", indices);
	checkWBI(L"\x0001\x0041", indices);
	checkWBI(L"\x0001\x0027", indices);
	checkWBI(L"\x0001\x002C", indices);
	checkWBI(L"\x0001\x0030", indices);
	checkWBI(L"\x0001\x005F", indices);
	checkWBI(L"\x0001\x0061", indices);
	initializeContainer(indices) = 0, 1, 2, 3;
	checkWBI(L"\x0001\x0061\x003A", indices);
	checkWBI(L"\x0001\x0061\x0027", indices);
	checkWBI(L"\x0001\x0061\x0027", indices);
	checkWBI(L"\x0001\x0061\x002C", indices);
	checkWBI(L"\x0001\x0031\x003A", indices);
	checkWBI(L"\x0001\x0031\x0027", indices);
	checkWBI(L"\x0001\x0031\x002C", indices);
	checkWBI(L"\x0001\x0031\x002E", indices);
	initializeContainer(indices) = 0, 1, 2;
	checkWBI(L"\x0300\x0020", indices);
	checkWBI(L"\x0300\x0001", indices);
	initializeContainer(indices) = 0, 1;
	checkWBI(L"\x0300", indices);
	initializeContainer(indices) = 0, 1, 2;
	checkWBI(L"\x0300\x000A", indices);
	checkWBI(L"\x0300\x000D", indices);
	checkWBI(L"\x0300\x0085", indices);
	initializeContainer(indices) = 0, 1;
	checkWBI(L"\x0300", indices);
	initializeContainer(indices) = 0, 1, 2;
	checkWBI(L"\x0300\x3031", indices);
	checkWBI(L"\x0300\x0041", indices);
	checkWBI(L"\x0300\x0027", indices);
	checkWBI(L"\x0300\x002C", indices);
	checkWBI(L"\x0300\x0030", indices);
	checkWBI(L"\x0300\x005F", indices);
	checkWBI(L"\x0300\x0061", indices);
	initializeContainer(indices) = 0, 1, 2, 3;
	checkWBI(L"\x0300\x0061\x003A", indices);
	checkWBI(L"\x0300\x0061\x0027", indices);
	checkWBI(L"\x0300\x0061\x0027", indices);
	checkWBI(L"\x0300\x0061\x002C", indices);
	checkWBI(L"\x0300\x0031\x003A", indices);
	checkWBI(L"\x0300\x0031\x0027", indices);
	checkWBI(L"\x0300\x0031\x002C", indices);
	checkWBI(L"\x0300\x0031\x002E", indices);
	initializeContainer(indices) = 0, 1, 2;
	checkWBI(L"\x000A\x0020", indices);
	checkWBI(L"\x000A\x0001", indices);
	checkWBI(L"\x000A\x0300", indices);
	checkWBI(L"\x000A\x000A", indices);
	checkWBI(L"\x000A\x000D", indices);
	checkWBI(L"\x000A\x0085", indices);
	checkWBI(L"\x000A\x00AD", indices);
	checkWBI(L"\x000A\x3031", indices);
	checkWBI(L"\x000A\x0041", indices);
	checkWBI(L"\x000A\x0027", indices);
	checkWBI(L"\x000A\x002C", indices);
	checkWBI(L"\x000A\x0030", indices);
	checkWBI(L"\x000A\x005F", indices);
	checkWBI(L"\x000A\x0061", indices);
	initializeContainer(indices) = 0, 1, 2, 3;
	checkWBI(L"\x000A\x0061\x003A", indices);
	checkWBI(L"\x000A\x0061\x0027", indices);
	checkWBI(L"\x000A\x0061\x0027", indices);
	checkWBI(L"\x000A\x0061\x002C", indices);
	checkWBI(L"\x000A\x0031\x003A", indices);
	checkWBI(L"\x000A\x0031\x0027", indices);
	checkWBI(L"\x000A\x0031\x002C", indices);
	checkWBI(L"\x000A\x0031\x002E", indices);
	initializeContainer(indices) = 0, 1, 2;
	checkWBI(L"\x000D\x0020", indices);
	checkWBI(L"\x000D\x0001", indices);
	checkWBI(L"\x000D\x0300", indices);
	initializeContainer(indices) = 0, 1;
	checkWBI(L"\x000D", indices);
	initializeContainer(indices) = 0, 1, 2;
	checkWBI(L"\x000D\x000D", indices);
	checkWBI(L"\x000D\x0085", indices);
	checkWBI(L"\x000D\x00AD", indices);
	checkWBI(L"\x000D\x3031", indices);
	checkWBI(L"\x000D\x0041", indices);
	checkWBI(L"\x000D\x0027", indices);
	checkWBI(L"\x000D\x002C", indices);
	checkWBI(L"\x000D\x0030", indices);
	checkWBI(L"\x000D\x005F", indices);
	checkWBI(L"\x000D\x0061", indices);
	initializeContainer(indices) = 0, 1, 2, 3;
	checkWBI(L"\x000D\x0061\x003A", indices);
	checkWBI(L"\x000D\x0061\x0027", indices);
	checkWBI(L"\x000D\x0061\x0027", indices);
	checkWBI(L"\x000D\x0061\x002C", indices);
	checkWBI(L"\x000D\x0031\x003A", indices);
	checkWBI(L"\x000D\x0031\x0027", indices);
	checkWBI(L"\x000D\x0031\x002C", indices);
	checkWBI(L"\x000D\x0031\x002E", indices);
	initializeContainer(indices) = 0, 1, 2;
	checkWBI(L"\x0085\x0020", indices);
	checkWBI(L"\x0085\x0001", indices);
	checkWBI(L"\x0085\x0300", indices);
	checkWBI(L"\x0085\x000A", indices);
	checkWBI(L"\x0085\x000D", indices);
	checkWBI(L"\x0085\x0085", indices);
	checkWBI(L"\x0085\x00AD", indices);
	checkWBI(L"\x0085\x3031", indices);
	checkWBI(L"\x0085\x0041", indices);
	checkWBI(L"\x0085\x0027", indices);
	checkWBI(L"\x0085\x002C", indices);
	checkWBI(L"\x0085\x0030", indices);
	checkWBI(L"\x0085\x005F", indices);
	checkWBI(L"\x0085\x0061", indices);
	initializeContainer(indices) = 0, 1, 2, 3;
	checkWBI(L"\x0085\x0061\x003A", indices);
	checkWBI(L"\x0085\x0061\x0027", indices);
	checkWBI(L"\x0085\x0061\x0027", indices);
	checkWBI(L"\x0085\x0061\x002C", indices);
	checkWBI(L"\x0085\x0031\x003A", indices);
	checkWBI(L"\x0085\x0031\x0027", indices);
	checkWBI(L"\x0085\x0031\x002C", indices);
	checkWBI(L"\x0085\x0031\x002E", indices);
	initializeContainer(indices) = 0, 1, 2;
	checkWBI(L"\x00AD\x0020", indices);
	checkWBI(L"\x00AD\x0001", indices);
	initializeContainer(indices) = 0, 1;
	checkWBI(L"\x00AD", indices);
	initializeContainer(indices) = 0, 1, 2;
	checkWBI(L"\x00AD\x000A", indices);
	checkWBI(L"\x00AD\x000D", indices);
	checkWBI(L"\x00AD\x0085", indices);
	initializeContainer(indices) = 0, 1;
	checkWBI(L"\x00AD", indices);
	initializeContainer(indices) = 0, 1, 2;
	checkWBI(L"\x00AD\x3031", indices);
	checkWBI(L"\x00AD\x0041", indices);
	checkWBI(L"\x00AD\x0027", indices);
	checkWBI(L"\x00AD\x002C", indices);
	checkWBI(L"\x00AD\x0030", indices);
	checkWBI(L"\x00AD\x005F", indices);
	checkWBI(L"\x00AD\x0061", indices);
	initializeContainer(indices) = 0, 1, 2, 3;
	checkWBI(L"\x00AD\x0061\x003A", indices);
	checkWBI(L"\x00AD\x0061\x0027", indices);
	checkWBI(L"\x00AD\x0061\x0027", indices);
	checkWBI(L"\x00AD\x0061\x002C", indices);
	checkWBI(L"\x00AD\x0031\x003A", indices);
	checkWBI(L"\x00AD\x0031\x0027", indices);
	checkWBI(L"\x00AD\x0031\x002C", indices);
	checkWBI(L"\x00AD\x0031\x002E", indices);
	initializeContainer(indices) = 0, 1, 2;
	checkWBI(L"\x3031\x0020", indices);
	checkWBI(L"\x3031\x0001", indices);
	initializeContainer(indices) = 0, 1;
	checkWBI(L"\x3031", indices);
	initializeContainer(indices) = 0, 1, 2;
	checkWBI(L"\x3031\x000A", indices);
	checkWBI(L"\x3031\x000D", indices);
	checkWBI(L"\x3031\x0085", indices);
	initializeContainer(indices) = 0, 1;
	checkWBI(L"\x3031", indices);
	checkWBI(L"\x3031", indices);
	initializeContainer(indices) = 0, 1, 2;
	checkWBI(L"\x3031\x0041", indices);
	checkWBI(L"\x3031\x0027", indices);
	checkWBI(L"\x3031\x002C", indices);
	checkWBI(L"\x3031\x0030", indices);
	initializeContainer(indices) = 0, 1;
	checkWBI(L"\x3031", indices);
	initializeContainer(indices) = 0, 1, 2;
	checkWBI(L"\x3031\x0061", indices);
	initializeContainer(indices) = 0, 1, 2, 3;
	checkWBI(L"\x3031\x0061\x003A", indices);
	checkWBI(L"\x3031\x0061\x0027", indices);
	checkWBI(L"\x3031\x0061\x0027", indices);
	checkWBI(L"\x3031\x0061\x002C", indices);
	checkWBI(L"\x3031\x0031\x003A", indices);
	checkWBI(L"\x3031\x0031\x0027", indices);
	checkWBI(L"\x3031\x0031\x002C", indices);
	checkWBI(L"\x3031\x0031\x002E", indices);
	initializeContainer(indices) = 0, 1, 2;
	checkWBI(L"\x0041\x0020", indices);
	checkWBI(L"\x0041\x0001", indices);
	initializeContainer(indices) = 0, 1;
	checkWBI(L"\x0041", indices);
	initializeContainer(indices) = 0, 1, 2;
	checkWBI(L"\x0041\x000A", indices);
	checkWBI(L"\x0041\x000D", indices);
	checkWBI(L"\x0041\x0085", indices);
	initializeContainer(indices) = 0, 1;
	checkWBI(L"\x0041", indices);
	initializeContainer(indices) = 0, 1, 2;
	checkWBI(L"\x0041\x3031", indices);
	initializeContainer(indices) = 0, 1;
	checkWBI(L"\x0041", indices);
	initializeContainer(indices) = 0, 1, 2;
	checkWBI(L"\x0041\x0027", indices);
	checkWBI(L"\x0041\x002C", indices);
	initializeContainer(indices) = 0, 1;
	checkWBI(L"\x0041", indices);
	checkWBI(L"\x0041", indices);
	checkWBI(L"\x0041", indices);
	initializeContainer(indices) = 0, 1, 2;
	checkWBI(L"\x0041\x003A", indices);
	checkWBI(L"\x0041\x0027", indices);
	checkWBI(L"\x0041\x0027", indices);
	checkWBI(L"\x0041\x002C", indices);
	checkWBI(L"\x0041\x003A", indices);
	checkWBI(L"\x0041\x0027", indices);
	checkWBI(L"\x0041\x002C", indices);
	checkWBI(L"\x0041\x002E", indices);
	checkWBI(L"\x0027\x0020", indices);
	checkWBI(L"\x0027\x0001", indices);
	initializeContainer(indices) = 0, 1;
	checkWBI(L"\x0027", indices);
	initializeContainer(indices) = 0, 1, 2;
	checkWBI(L"\x0027\x000A", indices);
	checkWBI(L"\x0027\x000D", indices);
	checkWBI(L"\x0027\x0085", indices);
	initializeContainer(indices) = 0, 1;
	checkWBI(L"\x0027", indices);
	initializeContainer(indices) = 0, 1, 2;
	checkWBI(L"\x0027\x3031", indices);
	checkWBI(L"\x0027\x0041", indices);
	checkWBI(L"\x0027\x0027", indices);
	checkWBI(L"\x0027\x002C", indices);
	checkWBI(L"\x0027\x0030", indices);
	checkWBI(L"\x0027\x005F", indices);
	checkWBI(L"\x0027\x0061", indices);
	initializeContainer(indices) = 0, 1, 2, 3;
	checkWBI(L"\x0027\x0061\x003A", indices);
	checkWBI(L"\x0027\x0061\x0027", indices);
	checkWBI(L"\x0027\x0061\x0027", indices);
	checkWBI(L"\x0027\x0061\x002C", indices);
	checkWBI(L"\x0027\x0031\x003A", indices);
	checkWBI(L"\x0027\x0031\x0027", indices);
	checkWBI(L"\x0027\x0031\x002C", indices);
	checkWBI(L"\x0027\x0031\x002E", indices);
	initializeContainer(indices) = 0, 1, 2;
	checkWBI(L"\x002C\x0020", indices);
	checkWBI(L"\x002C\x0001", indices);
	initializeContainer(indices) = 0, 1;
	checkWBI(L"\x002C", indices);
	initializeContainer(indices) = 0, 1, 2;
	checkWBI(L"\x002C\x000A", indices);
	checkWBI(L"\x002C\x000D", indices);
	checkWBI(L"\x002C\x0085", indices);
	initializeContainer(indices) = 0, 1;
	checkWBI(L"\x002C", indices);
	initializeContainer(indices) = 0, 1, 2;
	checkWBI(L"\x002C\x3031", indices);
	checkWBI(L"\x002C\x0041", indices);
	checkWBI(L"\x002C\x0027", indices);
	checkWBI(L"\x002C\x002C", indices);
	checkWBI(L"\x002C\x0030", indices);
	checkWBI(L"\x002C\x005F", indices);
	checkWBI(L"\x002C\x0061", indices);
	initializeContainer(indices) = 0, 1, 2, 3;
	checkWBI(L"\x002C\x0061\x003A", indices);
	checkWBI(L"\x002C\x0061\x0027", indices);
	checkWBI(L"\x002C\x0061\x0027", indices);
	checkWBI(L"\x002C\x0061\x002C", indices);
	checkWBI(L"\x002C\x0031\x003A", indices);
	checkWBI(L"\x002C\x0031\x0027", indices);
	checkWBI(L"\x002C\x0031\x002C", indices);
	checkWBI(L"\x002C\x0031\x002E", indices);
	initializeContainer(indices) = 0, 1, 2;
	checkWBI(L"\x0030\x0020", indices);
	checkWBI(L"\x0030\x0001", indices);
	initializeContainer(indices) = 0, 1;
	checkWBI(L"\x0030", indices);
	initializeContainer(indices) = 0, 1, 2;
	checkWBI(L"\x0030\x000A", indices);
	checkWBI(L"\x0030\x000D", indices);
	checkWBI(L"\x0030\x0085", indices);
	initializeContainer(indices) = 0, 1;
	checkWBI(L"\x0030", indices);
	initializeContainer(indices) = 0, 1, 2;
	checkWBI(L"\x0030\x3031", indices);
	initializeContainer(indices) = 0, 1;
	checkWBI(L"\x0030", indices);
	initializeContainer(indices) = 0, 1, 2;
	checkWBI(L"\x0030\x0027", indices);
	checkWBI(L"\x0030\x002C", indices);
	initializeContainer(indices) = 0, 1;
	checkWBI(L"\x0030", indices);
	checkWBI(L"\x0030", indices);
	checkWBI(L"\x0030", indices);
	initializeContainer(indices) = 0, 1, 2;
	checkWBI(L"\x0030\x003A", indices);
	checkWBI(L"\x0030\x0027", indices);
	checkWBI(L"\x0030\x0027", indices);
	checkWBI(L"\x0030\x002C", indices);
	checkWBI(L"\x0030\x003A", indices);
	checkWBI(L"\x0030\x0027", indices);
	checkWBI(L"\x0030\x002C", indices);
	checkWBI(L"\x0030\x002E", indices);
	checkWBI(L"\x005F\x0020", indices);
	checkWBI(L"\x005F\x0001", indices);
	initializeContainer(indices) = 0, 1;
	checkWBI(L"\x005F", indices);
	initializeContainer(indices) = 0, 1, 2;
	checkWBI(L"\x005F\x000A", indices);
	checkWBI(L"\x005F\x000D", indices);
	checkWBI(L"\x005F\x0085", indices);
	initializeContainer(indices) = 0, 1;
	checkWBI(L"\x005F", indices);
	checkWBI(L"\x005F", indices);
	checkWBI(L"\x005F", indices);
	initializeContainer(indices) = 0, 1, 2;
	checkWBI(L"\x005F\x0027", indices);
	checkWBI(L"\x005F\x002C", indices);
	initializeContainer(indices) = 0, 1;
	checkWBI(L"\x005F", indices);
	checkWBI(L"\x005F", indices);
	checkWBI(L"\x005F", indices);
	initializeContainer(indices) = 0, 1, 2;
	checkWBI(L"\x005F\x003A", indices);
	checkWBI(L"\x005F\x0027", indices);
	checkWBI(L"\x005F\x0027", indices);
	checkWBI(L"\x005F\x002C", indices);
	checkWBI(L"\x005F\x003A", indices);
	checkWBI(L"\x005F\x0027", indices);
	checkWBI(L"\x005F\x002C", indices);
	checkWBI(L"\x005F\x002E", indices);
	checkWBI(L"\x0061\x0020", indices);
	checkWBI(L"\x0061\x0001", indices);
	initializeContainer(indices) = 0, 1;
	checkWBI(L"\x0061", indices);
	initializeContainer(indices) = 0, 1, 2;
	checkWBI(L"\x0061\x000A", indices);
	checkWBI(L"\x0061\x000D", indices);
	checkWBI(L"\x0061\x0085", indices);
	initializeContainer(indices) = 0, 1;
	checkWBI(L"\x0061", indices);
	initializeContainer(indices) = 0, 1, 2;
	checkWBI(L"\x0061\x3031", indices);
	initializeContainer(indices) = 0, 1;
	checkWBI(L"\x0061", indices);
	initializeContainer(indices) = 0, 1, 2;
	checkWBI(L"\x0061\x0027", indices);
	checkWBI(L"\x0061\x002C", indices);
	initializeContainer(indices) = 0, 1;
	checkWBI(L"\x0061", indices);
	checkWBI(L"\x0061", indices);
	checkWBI(L"\x0061", indices);
	initializeContainer(indices) = 0, 1, 2;
	checkWBI(L"\x0061\x003A", indices);
	checkWBI(L"\x0061\x0027", indices);
	checkWBI(L"\x0061\x0027", indices);
	checkWBI(L"\x0061\x002C", indices);
	checkWBI(L"\x0061\x003A", indices);
	checkWBI(L"\x0061\x0027", indices);
	checkWBI(L"\x0061\x002C", indices);
	checkWBI(L"\x0061\x002E", indices);
	initializeContainer(indices) = 0, 1, 2, 3;
	checkWBI(L"\x0061\x003A\x0020", indices);
	checkWBI(L"\x0061\x003A\x0001", indices);
	initializeContainer(indices) = 0, 1, 2;
	checkWBI(L"\x0061\x003A", indices);
	initializeContainer(indices) = 0, 1, 2, 3;
	checkWBI(L"\x0061\x003A\x000A", indices);
	checkWBI(L"\x0061\x003A\x000D", indices);
	checkWBI(L"\x0061\x003A\x0085", indices);
	initializeContainer(indices) = 0, 1, 2;
	checkWBI(L"\x0061\x003A", indices);
	initializeContainer(indices) = 0, 1, 2, 3;
	checkWBI(L"\x0061\x003A\x3031", indices);
	initializeContainer(indices) = 0, 1;
	checkWBI(L"\x0061", indices);
	initializeContainer(indices) = 0, 1, 2, 3;
	checkWBI(L"\x0061\x003A\x0027", indices);
	checkWBI(L"\x0061\x003A\x002C", indices);
	checkWBI(L"\x0061\x003A\x0030", indices);
	checkWBI(L"\x0061\x003A\x005F", indices);
	initializeContainer(indices) = 0, 1;
	checkWBI(L"\x0061", indices);
	initializeContainer(indices) = 0, 1, 2;
	checkWBI(L"\x0061\x003A", indices);
	checkWBI(L"\x0061\x0027", indices);
	checkWBI(L"\x0061\x0027", indices);
	checkWBI(L"\x0061\x002C", indices);
	initializeContainer(indices) = 0, 1, 2, 3, 4;
	checkWBI(L"\x0061\x003A\x0031\x003A", indices);
	checkWBI(L"\x0061\x003A\x0031\x0027", indices);
	checkWBI(L"\x0061\x003A\x0031\x002C", indices);
	checkWBI(L"\x0061\x003A\x0031\x002E", indices);
	initializeContainer(indices) = 0, 1, 2, 3;
	checkWBI(L"\x0061\x0027\x0020", indices);
	checkWBI(L"\x0061\x0027\x0001", indices);
	initializeContainer(indices) = 0, 1, 2;
	checkWBI(L"\x0061\x0027", indices);
	initializeContainer(indices) = 0, 1, 2, 3;
	checkWBI(L"\x0061\x0027\x000A", indices);
	checkWBI(L"\x0061\x0027\x000D", indices);
	checkWBI(L"\x0061\x0027\x0085", indices);
	initializeContainer(indices) = 0, 1, 2;
	checkWBI(L"\x0061\x0027", indices);
	initializeContainer(indices) = 0, 1, 2, 3;
	checkWBI(L"\x0061\x0027\x3031", indices);
	initializeContainer(indices) = 0, 1;
	checkWBI(L"\x0061", indices);
	initializeContainer(indices) = 0, 1, 2, 3;
	checkWBI(L"\x0061\x0027\x0027", indices);
	checkWBI(L"\x0061\x0027\x002C", indices);
	checkWBI(L"\x0061\x0027\x0030", indices);
	checkWBI(L"\x0061\x0027\x005F", indices);
	initializeContainer(indices) = 0, 1;
	checkWBI(L"\x0061", indices);
	initializeContainer(indices) = 0, 1, 2;
	checkWBI(L"\x0061\x003A", indices);
	checkWBI(L"\x0061\x0027", indices);
	checkWBI(L"\x0061\x0027", indices);
	checkWBI(L"\x0061\x002C", indices);
	initializeContainer(indices) = 0, 1, 2, 3, 4;
	checkWBI(L"\x0061\x0027\x0031\x003A", indices);
	checkWBI(L"\x0061\x0027\x0031\x0027", indices);
	checkWBI(L"\x0061\x0027\x0031\x002C", indices);
	checkWBI(L"\x0061\x0027\x0031\x002E", indices);
	initializeContainer(indices) = 0, 1, 2, 3;
	checkWBI(L"\x0061\x0027\x0020", indices);
	checkWBI(L"\x0061\x0027\x0001", indices);
	initializeContainer(indices) = 0, 1, 2;
	checkWBI(L"\x0061\x0027", indices);
	initializeContainer(indices) = 0, 1, 2, 3;
	checkWBI(L"\x0061\x0027\x000A", indices);
	checkWBI(L"\x0061\x0027\x000D", indices);
	checkWBI(L"\x0061\x0027\x0085", indices);
	initializeContainer(indices) = 0, 1, 2;
	checkWBI(L"\x0061\x0027", indices);
	initializeContainer(indices) = 0, 1, 2, 3;
	checkWBI(L"\x0061\x0027\x3031", indices);
	initializeContainer(indices) = 0, 1;
	checkWBI(L"\x0061", indices);
	initializeContainer(indices) = 0, 1, 2, 3;
	checkWBI(L"\x0061\x0027\x0027", indices);
	checkWBI(L"\x0061\x0027\x002C", indices);
	checkWBI(L"\x0061\x0027\x0030", indices);
	checkWBI(L"\x0061\x0027\x005F", indices);
	initializeContainer(indices) = 0, 1;
	checkWBI(L"\x0061", indices);
	initializeContainer(indices) = 0, 1, 2;
	checkWBI(L"\x0061\x003A", indices);
	checkWBI(L"\x0061\x0027", indices);
	checkWBI(L"\x0061\x0027", indices);
	checkWBI(L"\x0061\x002C", indices);
	initializeContainer(indices) = 0, 1, 2, 3, 4;
	checkWBI(L"\x0061\x0027\x0031\x003A", indices);
	checkWBI(L"\x0061\x0027\x0031\x0027", indices);
	checkWBI(L"\x0061\x0027\x0031\x002C", indices);
	checkWBI(L"\x0061\x0027\x0031\x002E", indices);
	initializeContainer(indices) = 0, 1, 2, 3;
	checkWBI(L"\x0061\x002C\x0020", indices);
	checkWBI(L"\x0061\x002C\x0001", indices);
	initializeContainer(indices) = 0, 1, 2;
	checkWBI(L"\x0061\x002C", indices);
	initializeContainer(indices) = 0, 1, 2, 3;
	checkWBI(L"\x0061\x002C\x000A", indices);
	checkWBI(L"\x0061\x002C\x000D", indices);
	checkWBI(L"\x0061\x002C\x0085", indices);
	initializeContainer(indices) = 0, 1, 2;
	checkWBI(L"\x0061\x002C", indices);
	initializeContainer(indices) = 0, 1, 2, 3;
	checkWBI(L"\x0061\x002C\x3031", indices);
	checkWBI(L"\x0061\x002C\x0041", indices);
	checkWBI(L"\x0061\x002C\x0027", indices);
	checkWBI(L"\x0061\x002C\x002C", indices);
	checkWBI(L"\x0061\x002C\x0030", indices);
	checkWBI(L"\x0061\x002C\x005F", indices);
	checkWBI(L"\x0061\x002C\x0061", indices);
	initializeContainer(indices) = 0, 1, 2, 3, 4;
	checkWBI(L"\x0061\x002C\x0061\x003A", indices);
	checkWBI(L"\x0061\x002C\x0061\x0027", indices);
	checkWBI(L"\x0061\x002C\x0061\x0027", indices);
	checkWBI(L"\x0061\x002C\x0061\x002C", indices);
	checkWBI(L"\x0061\x002C\x0031\x003A", indices);
	checkWBI(L"\x0061\x002C\x0031\x0027", indices);
	checkWBI(L"\x0061\x002C\x0031\x002C", indices);
	checkWBI(L"\x0061\x002C\x0031\x002E", indices);
	initializeContainer(indices) = 0, 1, 2, 3;
	checkWBI(L"\x0031\x003A\x0020", indices);
	checkWBI(L"\x0031\x003A\x0001", indices);
	initializeContainer(indices) = 0, 1, 2;
	checkWBI(L"\x0031\x003A", indices);
	initializeContainer(indices) = 0, 1, 2, 3;
	checkWBI(L"\x0031\x003A\x000A", indices);
	checkWBI(L"\x0031\x003A\x000D", indices);
	checkWBI(L"\x0031\x003A\x0085", indices);
	initializeContainer(indices) = 0, 1, 2;
	checkWBI(L"\x0031\x003A", indices);
	initializeContainer(indices) = 0, 1, 2, 3;
	checkWBI(L"\x0031\x003A\x3031", indices);
	checkWBI(L"\x0031\x003A\x0041", indices);
	checkWBI(L"\x0031\x003A\x0027", indices);
	checkWBI(L"\x0031\x003A\x002C", indices);
	checkWBI(L"\x0031\x003A\x0030", indices);
	checkWBI(L"\x0031\x003A\x005F", indices);
	checkWBI(L"\x0031\x003A\x0061", indices);
	initializeContainer(indices) = 0, 1, 2, 3, 4;
	checkWBI(L"\x0031\x003A\x0061\x003A", indices);
	checkWBI(L"\x0031\x003A\x0061\x0027", indices);
	checkWBI(L"\x0031\x003A\x0061\x0027", indices);
	checkWBI(L"\x0031\x003A\x0061\x002C", indices);
	checkWBI(L"\x0031\x003A\x0031\x003A", indices);
	checkWBI(L"\x0031\x003A\x0031\x0027", indices);
	checkWBI(L"\x0031\x003A\x0031\x002C", indices);
	checkWBI(L"\x0031\x003A\x0031\x002E", indices);
	initializeContainer(indices) = 0, 1, 2, 3;
	checkWBI(L"\x0031\x0027\x0020", indices);
	checkWBI(L"\x0031\x0027\x0001", indices);
	initializeContainer(indices) = 0, 1, 2;
	checkWBI(L"\x0031\x0027", indices);
	initializeContainer(indices) = 0, 1, 2, 3;
	checkWBI(L"\x0031\x0027\x000A", indices);
	checkWBI(L"\x0031\x0027\x000D", indices);
	checkWBI(L"\x0031\x0027\x0085", indices);
	initializeContainer(indices) = 0, 1, 2;
	checkWBI(L"\x0031\x0027", indices);
	initializeContainer(indices) = 0, 1, 2, 3;
	checkWBI(L"\x0031\x0027\x3031", indices);
	checkWBI(L"\x0031\x0027\x0041", indices);
	checkWBI(L"\x0031\x0027\x0027", indices);
	checkWBI(L"\x0031\x0027\x002C", indices);
	checkWBI(L"\x0031\x0027\x0030", indices);
	checkWBI(L"\x0031\x0027\x005F", indices);
	checkWBI(L"\x0031\x0027\x0061", indices);
	initializeContainer(indices) = 0, 1, 2, 3, 4;
	checkWBI(L"\x0031\x0027\x0061\x003A", indices);
	checkWBI(L"\x0031\x0027\x0061\x0027", indices);
	checkWBI(L"\x0031\x0027\x0061\x0027", indices);
	checkWBI(L"\x0031\x0027\x0061\x002C", indices);
	checkWBI(L"\x0031\x0027\x0031\x003A", indices);
	checkWBI(L"\x0031\x0027\x0031\x0027", indices);
	checkWBI(L"\x0031\x0027\x0031\x002C", indices);
	checkWBI(L"\x0031\x0027\x0031\x002E", indices);
	initializeContainer(indices) = 0, 1, 2, 3;
	checkWBI(L"\x0031\x002C\x0020", indices);
	checkWBI(L"\x0031\x002C\x0001", indices);
	initializeContainer(indices) = 0, 1, 2;
	checkWBI(L"\x0031\x002C", indices);
	initializeContainer(indices) = 0, 1, 2, 3;
	checkWBI(L"\x0031\x002C\x000A", indices);
	checkWBI(L"\x0031\x002C\x000D", indices);
	checkWBI(L"\x0031\x002C\x0085", indices);
	initializeContainer(indices) = 0, 1, 2;
	checkWBI(L"\x0031\x002C", indices);
	initializeContainer(indices) = 0, 1, 2, 3;
	checkWBI(L"\x0031\x002C\x3031", indices);
	checkWBI(L"\x0031\x002C\x0041", indices);
	checkWBI(L"\x0031\x002C\x0027", indices);
	checkWBI(L"\x0031\x002C\x002C", indices);
	initializeContainer(indices) = 0, 1;
	checkWBI(L"\x0031", indices);
	initializeContainer(indices) = 0, 1, 2, 3;
	checkWBI(L"\x0031\x002C\x005F", indices);
	checkWBI(L"\x0031\x002C\x0061", indices);
	initializeContainer(indices) = 0, 1, 2, 3, 4;
	checkWBI(L"\x0031\x002C\x0061\x003A", indices);
	checkWBI(L"\x0031\x002C\x0061\x0027", indices);
	checkWBI(L"\x0031\x002C\x0061\x0027", indices);
	checkWBI(L"\x0031\x002C\x0061\x002C", indices);
	initializeContainer(indices) = 0, 1, 2;
	checkWBI(L"\x0031\x003A", indices);
	checkWBI(L"\x0031\x0027", indices);
	checkWBI(L"\x0031\x002C", indices);
	checkWBI(L"\x0031\x002E", indices);
	initializeContainer(indices) = 0, 1, 2, 3;
	checkWBI(L"\x0031\x002E\x0020", indices);
	checkWBI(L"\x0031\x002E\x0001", indices);
	initializeContainer(indices) = 0, 1, 2;
	checkWBI(L"\x0031\x002E", indices);
	initializeContainer(indices) = 0, 1, 2, 3;
	checkWBI(L"\x0031\x002E\x000A", indices);
	checkWBI(L"\x0031\x002E\x000D", indices);
	checkWBI(L"\x0031\x002E\x0085", indices);
	initializeContainer(indices) = 0, 1, 2;
	checkWBI(L"\x0031\x002E", indices);
	initializeContainer(indices) = 0, 1, 2, 3;
	checkWBI(L"\x0031\x002E\x3031", indices);
	checkWBI(L"\x0031\x002E\x0041", indices);
	checkWBI(L"\x0031\x002E\x0027", indices);
	checkWBI(L"\x0031\x002E\x002C", indices);
	initializeContainer(indices) = 0, 1;
	checkWBI(L"\x0031", indices);
	initializeContainer(indices) = 0, 1, 2, 3;
	checkWBI(L"\x0031\x002E\x005F", indices);
	checkWBI(L"\x0031\x002E\x0061", indices);
	initializeContainer(indices) = 0, 1, 2, 3, 4;
	checkWBI(L"\x0031\x002E\x0061\x003A", indices);
	checkWBI(L"\x0031\x002E\x0061\x0027", indices);
	checkWBI(L"\x0031\x002E\x0061\x0027", indices);
	checkWBI(L"\x0031\x002E\x0061\x002C", indices);
	initializeContainer(indices) = 0, 1, 2;
	checkWBI(L"\x0031\x003A", indices);
	checkWBI(L"\x0031\x0027", indices);
	checkWBI(L"\x0031\x002C", indices);
	checkWBI(L"\x0031\x002E", indices);
	initializeContainer(indices) = 0, 1;
	checkWBI(L"\x0063", indices);
	checkWBI(L"\x0063", indices);
	checkWBI(L"\x0061", indices);
	initializeContainer(indices) = 0, 1, 2, 3, 4, 5, 6;
	checkWBI(L"\x0061\x0024\x002D\x0033\x0025\x0062", indices);
	initializeContainer(indices) = 0, 1;
	checkWBI(L"\x0033", indices);
	initializeContainer(indices) = 0, 1, 2;
	checkWBI(L"\x2060\x0063", indices);
	checkWBI(L"\x2060\x0063", indices);
	checkWBI(L"\x2060\x0061", indices);
	initializeContainer(indices) = 0, 1, 2, 3, 4, 5, 6, 7;
	checkWBI(L"\x2060\x0061\x0024\x002D\x0033\x0025\x0062", indices);
	initializeContainer(indices) = 0, 1, 2;
	checkWBI(L"\x2060\x0033", indices);
}

void testSentenceBreakIterator() {
	std::vector<std::size_t> indices;
	initializeContainer(indices) = 0, 1;
	checkSBI(L"\x0023", indices);
	checkSBI(L"\x0023", indices);
	checkSBI(L"\x0023", indices);
	checkSBI(L"\x0023", indices);
	checkSBI(L"\x0023", indices);
	checkSBI(L"\x0023", indices);
	checkSBI(L"\x0023", indices);
	checkSBI(L"\x0023", indices);
	checkSBI(L"\x0023", indices);
	checkSBI(L"\x0023", indices);
	checkSBI(L"\x0023", indices);
	checkSBI(L"\x0023", indices);
	checkSBI(L"\x0023", indices);
	checkSBI(L"\x0023", indices);
	checkSBI(L"\x0023", indices);
	checkSBI(L"\x0023", indices);
	checkSBI(L"\x0001", indices);
	checkSBI(L"\x0001", indices);
	checkSBI(L"\x0001", indices);
	checkSBI(L"\x0001", indices);
	checkSBI(L"\x0001", indices);
	checkSBI(L"\x0001", indices);
	checkSBI(L"\x0001", indices);
	checkSBI(L"\x0001", indices);
	checkSBI(L"\x0001", indices);
	checkSBI(L"\x0001", indices);
	checkSBI(L"\x0001", indices);
	checkSBI(L"\x0001", indices);
	checkSBI(L"\x0001", indices);
	checkSBI(L"\x0001", indices);
	checkSBI(L"\x0001", indices);
	checkSBI(L"\x0001", indices);
	checkSBI(L"\x0300", indices);
	checkSBI(L"\x0300", indices);
	checkSBI(L"\x0300", indices);
	checkSBI(L"\x0300", indices);
	checkSBI(L"\x0300", indices);
	checkSBI(L"\x0300", indices);
	checkSBI(L"\x0300", indices);
	checkSBI(L"\x0300", indices);
	checkSBI(L"\x0300", indices);
	checkSBI(L"\x0300", indices);
	checkSBI(L"\x0300", indices);
	checkSBI(L"\x0300", indices);
	checkSBI(L"\x0300", indices);
	checkSBI(L"\x0300", indices);
	checkSBI(L"\x0300", indices);
	checkSBI(L"\x0300", indices);
	checkSBI(L"\x00AD", indices);
	checkSBI(L"\x00AD", indices);
	checkSBI(L"\x00AD", indices);
	checkSBI(L"\x00AD", indices);
	checkSBI(L"\x00AD", indices);
	checkSBI(L"\x00AD", indices);
	checkSBI(L"\x00AD", indices);
	checkSBI(L"\x00AD", indices);
	checkSBI(L"\x00AD", indices);
	checkSBI(L"\x00AD", indices);
	checkSBI(L"\x00AD", indices);
	checkSBI(L"\x00AD", indices);
	checkSBI(L"\x00AD", indices);
	checkSBI(L"\x00AD", indices);
	checkSBI(L"\x00AD", indices);
	checkSBI(L"\x00AD", indices);
	initializeContainer(indices) = 0, 1, 2;
	checkSBI(L"\x000A\x0023", indices);
	checkSBI(L"\x000A\x0001", indices);
	checkSBI(L"\x000A\x0300", indices);
	checkSBI(L"\x000A\x00AD", indices);
	checkSBI(L"\x000A\x000A", indices);
	checkSBI(L"\x000A\x000D", indices);
	checkSBI(L"\x000A\x0085", indices);
	checkSBI(L"\x000A\x0009", indices);
	checkSBI(L"\x000A\x0020", indices);
	checkSBI(L"\x000A\x0061", indices);
	checkSBI(L"\x000A\x0041", indices);
	checkSBI(L"\x000A\x00A0", indices);
	checkSBI(L"\x000A\x0030", indices);
	checkSBI(L"\x000A\x002E", indices);
	checkSBI(L"\x000A\x0021", indices);
	checkSBI(L"\x000A\x0022", indices);
	checkSBI(L"\x000D\x0023", indices);
	checkSBI(L"\x000D\x0001", indices);
	checkSBI(L"\x000D\x0300", indices);
	checkSBI(L"\x000D\x00AD", indices);
	initializeContainer(indices) = 0, 1;
	checkSBI(L"\x000D", indices);
	initializeContainer(indices) = 0, 1, 2;
	checkSBI(L"\x000D\x000D", indices);
	checkSBI(L"\x000D\x0085", indices);
	checkSBI(L"\x000D\x0009", indices);
	checkSBI(L"\x000D\x0020", indices);
	checkSBI(L"\x000D\x0061", indices);
	checkSBI(L"\x000D\x0041", indices);
	checkSBI(L"\x000D\x00A0", indices);
	checkSBI(L"\x000D\x0030", indices);
	checkSBI(L"\x000D\x002E", indices);
	checkSBI(L"\x000D\x0021", indices);
	checkSBI(L"\x000D\x0022", indices);
	checkSBI(L"\x0085\x0023", indices);
	checkSBI(L"\x0085\x0001", indices);
	checkSBI(L"\x0085\x0300", indices);
	checkSBI(L"\x0085\x00AD", indices);
	checkSBI(L"\x0085\x000A", indices);
	checkSBI(L"\x0085\x000D", indices);
	checkSBI(L"\x0085\x0085", indices);
	checkSBI(L"\x0085\x0009", indices);
	checkSBI(L"\x0085\x0020", indices);
	checkSBI(L"\x0085\x0061", indices);
	checkSBI(L"\x0085\x0041", indices);
	checkSBI(L"\x0085\x00A0", indices);
	checkSBI(L"\x0085\x0030", indices);
	checkSBI(L"\x0085\x002E", indices);
	checkSBI(L"\x0085\x0021", indices);
	checkSBI(L"\x0085\x0022", indices);
	initializeContainer(indices) = 0, 1;
	checkSBI(L"\x0009", indices);
	checkSBI(L"\x0009", indices);
	checkSBI(L"\x0009", indices);
	checkSBI(L"\x0009", indices);
	checkSBI(L"\x0009", indices);
	checkSBI(L"\x0009", indices);
	checkSBI(L"\x0009", indices);
	checkSBI(L"\x0009", indices);
	checkSBI(L"\x0009", indices);
	checkSBI(L"\x0009", indices);
	checkSBI(L"\x0009", indices);
	checkSBI(L"\x0009", indices);
	checkSBI(L"\x0009", indices);
	checkSBI(L"\x0009", indices);
	checkSBI(L"\x0009", indices);
	checkSBI(L"\x0009", indices);
	checkSBI(L"\x0020", indices);
	checkSBI(L"\x0020", indices);
	checkSBI(L"\x0020", indices);
	checkSBI(L"\x0020", indices);
	checkSBI(L"\x0020", indices);
	checkSBI(L"\x0020", indices);
	checkSBI(L"\x0020", indices);
	checkSBI(L"\x0020", indices);
	checkSBI(L"\x0020", indices);
	checkSBI(L"\x0020", indices);
	checkSBI(L"\x0020", indices);
	checkSBI(L"\x0020", indices);
	checkSBI(L"\x0020", indices);
	checkSBI(L"\x0020", indices);
	checkSBI(L"\x0020", indices);
	checkSBI(L"\x0020", indices);
	checkSBI(L"\x0061", indices);
	checkSBI(L"\x0061", indices);
	checkSBI(L"\x0061", indices);
	checkSBI(L"\x0061", indices);
	checkSBI(L"\x0061", indices);
	checkSBI(L"\x0061", indices);
	checkSBI(L"\x0061", indices);
	checkSBI(L"\x0061", indices);
	checkSBI(L"\x0061", indices);
	checkSBI(L"\x0061", indices);
	checkSBI(L"\x0061", indices);
	checkSBI(L"\x0061", indices);
	checkSBI(L"\x0061", indices);
	checkSBI(L"\x0061", indices);
	checkSBI(L"\x0061", indices);
	checkSBI(L"\x0061", indices);
	checkSBI(L"\x0041", indices);
	checkSBI(L"\x0041", indices);
	checkSBI(L"\x0041", indices);
	checkSBI(L"\x0041", indices);
	checkSBI(L"\x0041", indices);
	checkSBI(L"\x0041", indices);
	checkSBI(L"\x0041", indices);
	checkSBI(L"\x0041", indices);
	checkSBI(L"\x0041", indices);
	checkSBI(L"\x0041", indices);
	checkSBI(L"\x0041", indices);
	checkSBI(L"\x0041", indices);
	checkSBI(L"\x0041", indices);
	checkSBI(L"\x0041", indices);
	checkSBI(L"\x0041", indices);
	checkSBI(L"\x0041", indices);
	checkSBI(L"\x00A0", indices);
	checkSBI(L"\x00A0", indices);
	checkSBI(L"\x00A0", indices);
	checkSBI(L"\x00A0", indices);
	checkSBI(L"\x00A0", indices);
	checkSBI(L"\x00A0", indices);
	checkSBI(L"\x00A0", indices);
	checkSBI(L"\x00A0", indices);
	checkSBI(L"\x00A0", indices);
	checkSBI(L"\x00A0", indices);
	checkSBI(L"\x00A0", indices);
	checkSBI(L"\x00A0", indices);
	checkSBI(L"\x00A0", indices);
	checkSBI(L"\x00A0", indices);
	checkSBI(L"\x00A0", indices);
	checkSBI(L"\x00A0", indices);
	checkSBI(L"\x0030", indices);
	checkSBI(L"\x0030", indices);
	checkSBI(L"\x0030", indices);
	checkSBI(L"\x0030", indices);
	checkSBI(L"\x0030", indices);
	checkSBI(L"\x0030", indices);
	checkSBI(L"\x0030", indices);
	checkSBI(L"\x0030", indices);
	checkSBI(L"\x0030", indices);
	checkSBI(L"\x0030", indices);
	checkSBI(L"\x0030", indices);
	checkSBI(L"\x0030", indices);
	checkSBI(L"\x0030", indices);
	checkSBI(L"\x0030", indices);
	checkSBI(L"\x0030", indices);
	checkSBI(L"\x0030", indices);
	initializeContainer(indices) = 0, 1, 2;
	checkSBI(L"\x002E\x0023", indices);
	checkSBI(L"\x002E\x0001", indices);
	initializeContainer(indices) = 0, 1;
	checkSBI(L"\x002E", indices);
	checkSBI(L"\x002E", indices);
	checkSBI(L"\x002E", indices);
	checkSBI(L"\x002E", indices);
	checkSBI(L"\x002E", indices);
	checkSBI(L"\x002E", indices);
	checkSBI(L"\x002E", indices);
	checkSBI(L"\x002E", indices);
	initializeContainer(indices) = 0, 1, 2;
	checkSBI(L"\x002E\x0041", indices);
	checkSBI(L"\x002E\x00A0", indices);
	initializeContainer(indices) = 0, 1;
	checkSBI(L"\x002E", indices);
	checkSBI(L"\x002E", indices);
	checkSBI(L"\x002E", indices);
	checkSBI(L"\x002E", indices);
	initializeContainer(indices) = 0, 1, 2;
	checkSBI(L"\x0021\x0023", indices);
	checkSBI(L"\x0021\x0001", indices);
	initializeContainer(indices) = 0, 1;
	checkSBI(L"\x0021", indices);
	checkSBI(L"\x0021", indices);
	checkSBI(L"\x0021", indices);
	checkSBI(L"\x0021", indices);
	checkSBI(L"\x0021", indices);
	checkSBI(L"\x0021", indices);
	checkSBI(L"\x0021", indices);
	initializeContainer(indices) = 0, 1, 2;
	checkSBI(L"\x0021\x0061", indices);
	checkSBI(L"\x0021\x0041", indices);
	checkSBI(L"\x0021\x00A0", indices);
	checkSBI(L"\x0021\x0030", indices);
	initializeContainer(indices) = 0, 1;
	checkSBI(L"\x0021", indices);
	checkSBI(L"\x0021", indices);
	checkSBI(L"\x0021", indices);
	checkSBI(L"\x0022", indices);
	checkSBI(L"\x0022", indices);
	checkSBI(L"\x0022", indices);
	checkSBI(L"\x0022", indices);
	checkSBI(L"\x0022", indices);
	checkSBI(L"\x0022", indices);
	checkSBI(L"\x0022", indices);
	checkSBI(L"\x0022", indices);
	checkSBI(L"\x0022", indices);
	checkSBI(L"\x0022", indices);
	checkSBI(L"\x0022", indices);
	checkSBI(L"\x0022", indices);
	checkSBI(L"\x0022", indices);
	checkSBI(L"\x0022", indices);
	checkSBI(L"\x0022", indices);
	checkSBI(L"\x0022", indices);
	initializeContainer(indices) = 0, 1, 2;
	checkSBI(L"\x0028\x0028", indices);
	checkSBI(L"\x0028\x0028", indices);
	initializeContainer(indices) = 0, 1;
	checkSBI(L"\x0055", indices);
	initializeContainer(indices) = 0, 1, 2;
	checkSBI(L"\x0055\x0048", indices);
	initializeContainer(indices) = 0, 1;
	checkSBI(L"\x0055", indices);
	checkSBI(L"\x0033", indices);
	checkSBI(L"\x0063", indices);
	initializeContainer(indices) = 0, 1, 2;
	checkSBI(L"\x0065\x00A0", indices);
	checkSBI(L"\x0065\x00A0", indices);
	initializeContainer(indices) = 0, 1;
	checkSBI(L"\x0074", indices);
	initializeContainer(indices) = 0, 1, 2;
	checkSBI(L"\x5B57\x5B57", indices);
	checkSBI(L"\x0065\x5B83", indices);
	initializeContainer(indices) = 0, 1;
	checkSBI(L"\x0065", indices);
	initializeContainer(indices) = 0, 1, 2;
	checkSBI(L"\x5B57\x5B83", indices);
	checkSBI(L"\x2060\x0028", indices);
	checkSBI(L"\x2060\x0028", indices);
	initializeContainer(indices) = 0, 1;
	checkSBI(L"\x2060", indices);
	initializeContainer(indices) = 0, 1, 2;
	checkSBI(L"\x2060\x0048", indices);
	initializeContainer(indices) = 0, 1;
	checkSBI(L"\x2060", indices);
	checkSBI(L"\x2060", indices);
	checkSBI(L"\x2060", indices);
	initializeContainer(indices) = 0, 1, 2;
	checkSBI(L"\x2060\x00A0", indices);
	checkSBI(L"\x2060\x00A0", indices);
	initializeContainer(indices) = 0, 1;
	checkSBI(L"\x2060", indices);
	initializeContainer(indices) = 0, 1, 2;
	checkSBI(L"\x2060\x5B57", indices);
	checkSBI(L"\x2060\x5B83", indices);
	initializeContainer(indices) = 0, 1;
	checkSBI(L"\x2060", indices);
	initializeContainer(indices) = 0, 1, 2;
	checkSBI(L"\x2060\x5B83", indices);
}
