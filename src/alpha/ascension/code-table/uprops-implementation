// automatically generated by props.pl at $ Thu Feb  8 00:16:29 2007 $
template<> inline bool BinaryProperty::is<BinaryProperty::WHITE_SPACE>(CodePoint cp) {return std::binary_search(tableOfBp__White_Space_,tableOfBp__White_Space_+12,static_cast<Char>(cp));}
template<> inline bool BinaryProperty::is<BinaryProperty::BIDI_CONTROL>(CodePoint cp) {return findInRange(tableOfBp__Bidi_Control_,tableOfBp__Bidi_Control_+4,cp)!=0;}
template<> inline bool BinaryProperty::is<BinaryProperty::JOIN_CONTROL>(CodePoint cp) {return findInRange(tableOfBp__Join_Control_,tableOfBp__Join_Control_+2,cp)!=0;}
template<> inline bool BinaryProperty::is<BinaryProperty::DASH>(CodePoint cp) {return std::binary_search(tableOfBp__Dash_,tableOfBp__Dash_+17,static_cast<Char>(cp));}
template<> inline bool BinaryProperty::is<BinaryProperty::HYPHEN>(CodePoint cp) {return std::binary_search(tableOfBp__Hyphen_,tableOfBp__Hyphen_+10,static_cast<Char>(cp));}
template<> inline bool BinaryProperty::is<BinaryProperty::QUOTATION_MARK>(CodePoint cp) {return std::binary_search(tableOfBp__Quotation_Mark_,tableOfBp__Quotation_Mark_+27,static_cast<Char>(cp));}
template<> inline bool BinaryProperty::is<BinaryProperty::TERMINAL_PUNCTUATION>(CodePoint cp) {return findInRange(tableOfBp__Terminal_Punctuation_,tableOfBp__Terminal_Punctuation_+96,cp)!=0;}
template<> inline bool BinaryProperty::is<BinaryProperty::OTHER_MATH>(CodePoint cp) {return findInRange(tableOfBp__Other_Math_,tableOfBp__Other_Math_+208,cp)!=0;}
template<> inline bool BinaryProperty::is<BinaryProperty::HEX_DIGIT>(CodePoint cp) {return findInRange(tableOfBp__Hex_Digit_,tableOfBp__Hex_Digit_+12,cp)!=0;}
template<> inline bool BinaryProperty::is<BinaryProperty::ASCII_HEX_DIGIT>(CodePoint cp) {return findInRange(tableOfBp__ASCII_Hex_Digit_,tableOfBp__ASCII_Hex_Digit_+6,cp)!=0;}
template<> inline bool BinaryProperty::is<BinaryProperty::OTHER_ALPHABETIC>(CodePoint cp) {return findInRange(tableOfBp__Other_Alphabetic_,tableOfBp__Other_Alphabetic_+300,cp)!=0;}
template<> inline bool BinaryProperty::is<BinaryProperty::IDEOGRAPHIC>(CodePoint cp) {return findInRange(tableOfBp__Ideographic_,tableOfBp__Ideographic_+20,cp)!=0;}
template<> inline bool BinaryProperty::is<BinaryProperty::DIACRITIC>(CodePoint cp) {return findInRange(tableOfBp__Diacritic_,tableOfBp__Diacritic_+202,cp)!=0;}
template<> inline bool BinaryProperty::is<BinaryProperty::EXTENDER>(CodePoint cp) {return std::binary_search(tableOfBp__Extender_,tableOfBp__Extender_+13,static_cast<Char>(cp));}
template<> inline bool BinaryProperty::is<BinaryProperty::OTHER_LOWERCASE>(CodePoint cp) {return findInRange(tableOfBp__Other_Lowercase_,tableOfBp__Other_Lowercase_+22,cp)!=0;}
template<> inline bool BinaryProperty::is<BinaryProperty::OTHER_UPPERCASE>(CodePoint cp) {return findInRange(tableOfBp__Other_Uppercase_,tableOfBp__Other_Uppercase_+4,cp)!=0;}
template<> inline bool BinaryProperty::is<BinaryProperty::NONCHARACTER_CODE_POINT>(CodePoint cp) {return findInRange(tableOfBp__Noncharacter_Code_Point_,tableOfBp__Noncharacter_Code_Point_+34,cp)!=0;}
template<> inline bool BinaryProperty::is<BinaryProperty::OTHER_GRAPHEME_EXTEND>(CodePoint cp) {return std::binary_search(tableOfBp__Other_Grapheme_Extend_,tableOfBp__Other_Grapheme_Extend_+15,cp);}
template<> inline bool BinaryProperty::is<BinaryProperty::IDS_BINARY_OPERATOR>(CodePoint cp) {return findInRange(tableOfBp__IDS_Binary_Operator_,tableOfBp__IDS_Binary_Operator_+4,cp)!=0;}
template<> inline bool BinaryProperty::is<BinaryProperty::IDS_TRINARY_OPERATOR>(CodePoint cp) {return findInRange(tableOfBp__IDS_Trinary_Operator_,tableOfBp__IDS_Trinary_Operator_+2,cp)!=0;}
template<> inline bool BinaryProperty::is<BinaryProperty::RADICAL>(CodePoint cp) {return findInRange(tableOfBp__Radical_,tableOfBp__Radical_+6,cp)!=0;}
template<> inline bool BinaryProperty::is<BinaryProperty::UNIFIED_IDEOGRAPH>(CodePoint cp) {return findInRange(tableOfBp__Unified_Ideograph_,tableOfBp__Unified_Ideograph_+20,cp)!=0;}
template<> inline bool BinaryProperty::is<BinaryProperty::OTHER_DEFAULT_IGNORABLE_CODE_POINT>(CodePoint cp) {return findInRange(tableOfBp__Other_Default_Ignorable_Code_Point_,tableOfBp__Other_Default_Ignorable_Code_Point_+20,cp)!=0;}
template<> inline bool BinaryProperty::is<BinaryProperty::DEPRECATED>(CodePoint cp) {return findInRange(tableOfBp__Deprecated_,tableOfBp__Deprecated_+8,cp)!=0;}
template<> inline bool BinaryProperty::is<BinaryProperty::SOFT_DOTTED>(CodePoint cp) {return findInRange(tableOfBp__Soft_Dotted_,tableOfBp__Soft_Dotted_+60,cp)!=0;}
template<> inline bool BinaryProperty::is<BinaryProperty::LOGICAL_ORDER_EXCEPTION>(CodePoint cp) {return findInRange(tableOfBp__Logical_Order_Exception_,tableOfBp__Logical_Order_Exception_+4,cp)!=0;}
template<> inline bool BinaryProperty::is<BinaryProperty::OTHER_ID_START>(CodePoint cp) {return std::binary_search(tableOfBp__Other_ID_Start_,tableOfBp__Other_ID_Start_+3,static_cast<Char>(cp));}
template<> inline bool BinaryProperty::is<BinaryProperty::OTHER_ID_CONTINUE>(CodePoint cp) {return findInRange(tableOfBp__Other_ID_Continue_,tableOfBp__Other_ID_Continue_+2,cp)!=0;}
template<> inline bool BinaryProperty::is<BinaryProperty::STERM>(CodePoint cp) {return std::binary_search(tableOfBp__STerm_,tableOfBp__STerm_+30,static_cast<Char>(cp));}
template<> inline bool BinaryProperty::is<BinaryProperty::VARIATION_SELECTOR>(CodePoint cp) {return findInRange(tableOfBp__Variation_Selector_,tableOfBp__Variation_Selector_+6,cp)!=0;}
template<> inline bool BinaryProperty::is<BinaryProperty::PATTERN_WHITE_SPACE>(CodePoint cp) {return std::binary_search(tableOfBp__Pattern_White_Space_,tableOfBp__Pattern_White_Space_+6,static_cast<Char>(cp));}
template<> inline bool BinaryProperty::is<BinaryProperty::PATTERN_SYNTAX>(CodePoint cp) {return findInRange(tableOfBp__Pattern_Syntax_,tableOfBp__Pattern_Syntax_+482,cp)!=0;}
inline CodePoint CaseFolder::foldSimple(CodePoint cp) {
	if(cp < 0x10000) {
		const Char* const p = std::lower_bound(CASED_UCS2, CASED_UCS2 + 894, static_cast<Char>(cp));
		return (*p == cp) ? FOLDED_UCS2[p - CASED_UCS2] : cp;
	} else {
		const CodePoint* const p = std::lower_bound(CASED_UCS4, CASED_UCS4 + (933 + 1 - 894), cp);
		return (*p == cp) ? FOLDED_UCS4[p - CASED_UCS4] : cp;
	}
}
